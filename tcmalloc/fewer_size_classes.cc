// Copyright 2019 The TCMalloc Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "absl/types/span.h"
#include "tcmalloc/common.h"
#include "tcmalloc/internal/config.h"
#include "tcmalloc/size_class_info.h"

GOOGLE_MALLOC_SECTION_BEGIN
namespace tcmalloc {
namespace tcmalloc_internal {

// Columns in the following tables:
// - bytes: size of the size class
// - pages: number of pages per span
// - batch: preferred number of objects for transfers between caches
// - cap: maximum cpu cache capacity
// - class: size class number
// - objs: number of objects per span
// - waste/fixed: fixed per-size-class overhead due to end-of-span fragmentation
//   and other factors. For instance, if we have a 96 byte size class, and use
//   a single 8KiB page, then we will hold 85 objects per span, and have 32
//   bytes left over. There is also a fixed component of 48 bytes of TCMalloc
//   metadata per span. Together, the fixed overhead would be wasted/allocated
//   = (32 + 48) / (8192 - 32) ~= 0.98%.
// - waste/sampling: overhead due to heap sampling
//   (rounding to page size, proxy object, metadata).
// - inc: increment from the previous size class. This caps the dynamic
//   overhead component based on mismatches between the number of bytes
//   requested and the number of bytes provided by the size class. Together
//   they sum to the total overhead; for instance if you asked for a 50-byte
//   allocation that rounds up to a 64-byte size class, the dynamic overhead
//   would be 28%, and if waste were 22% it would mean (on average) 25 bytes
//   of overhead for allocations of that size.

// clang-format off
#if defined(__cpp_aligned_new) && __STDCPP_DEFAULT_NEW_ALIGNMENT__ <= 8
#if TCMALLOC_PAGE_SHIFT == 13
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_rate = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {    16,    1,   32, 2730},  //  0   512  0.58%    0.42%   0.00%
  {    32,    1,   32, 2730},  //  1   256  0.58%    0.42% 100.00%
  {    64,    1,   32, 2730},  //  2   128  0.58%    0.42% 100.00%
  {    72,    1,   32, 1746},  //  3   113  1.26%    0.42%  12.50%
  {    80,    1,   32, 2730},  //  4   102  0.97%    0.42%  11.11%
  {    96,    1,   32, 2730},  //  5    85  0.97%    0.42%  20.00%
  {   112,    1,   32, 1497},  //  6    73  0.78%    0.42%  16.67%
  {   128,    1,   32, 1685},  //  7    64  0.58%    0.42%  14.29%
  {   160,    1,   32, 1794},  //  8    51  0.97%    0.42%  25.00%
  {   208,    1,   32, 1129},  //  9    39  1.55%    0.42%  30.00%
  {   256,    1,   32, 1078},  // 10    32  0.58%    0.42%  23.08%
  {   312,    1,   32,  643},  // 11    26  1.55%    0.42%  21.88%
  {   352,    1,   32,  504},  // 12    23  1.75%    0.42%  12.82%
  {   448,    1,   32,  555},  // 13    18  2.14%    0.42%  27.27%
  {   512,    1,   32,  559},  // 14    16  0.58%    0.42%  14.29%
  {   576,    1,   32,  309},  // 15    14  2.14%    0.42%  12.50%
  {   704,    1,   32,  333},  // 16    11  6.02%    0.43%  22.22%
  {   896,    1,   32,  316},  // 17     9  2.14%    0.43%  27.27%
  {  1024,    1,   32,  440},  // 18     8  0.58%    0.42%  14.29%
  {  1152,    2,   32,  240},  // 19    14  1.85%    0.43%  12.50%
  {  1408,    2,   32,  252},  // 20    11  5.74%    0.43%  22.22%
  {  1792,    2,   32,  252},  // 21     9  1.85%    0.43%  27.27%
  {  2048,    2,   32,  249},  // 22     8  0.29%    0.42%  14.29%
  {  2304,    2,   28,  204},  // 23     7  1.85%    0.43%  12.50%
  {  2688,    2,   24,  195},  // 24     6  1.85%    0.43%  16.67%
  {  3200,    2,   20,  195},  // 25     5  2.63%    0.43%  19.05%
  {  4096,    1,   16,  419},  // 26     2  0.58%    0.43%  28.00%
  {  4736,    3,   13,  184},  // 27     5  3.83%    0.43%  15.62%
  {  6144,    3,   10,  191},  // 28     4  0.19%    0.42%  29.73%
  {  8192,    1,    8,  263},  // 29     1  0.58%    0.03%  33.33%
  { 12288,    3,    5,  189},  // 30     2  0.19%    0.82%  50.00%
  { 16384,    2,    4,  191},  // 31     1  0.29%    0.03%  33.33%
  { 20480,    5,    3,  176},  // 32     2  0.12%    1.21%  25.00%
  { 28672,    7,    2,  180},  // 33     2  0.08%    1.60%  40.00%
  { 32768,    4,    2,  188},  // 34     1  0.15%    0.03%  14.29%
  { 40960,    5,    2,  173},  // 35     1  0.12%    0.03%  25.00%
  { 65536,    8,    2,  180},  // 36     1  0.07%    0.03%  60.00%
  { 73728,    9,    2,  173},  // 37     1  0.07%    0.03%  12.50%
  { 98304,   12,    2,  173},  // 38     1  0.05%    0.03%  33.33%
  {139264,   17,    2,  175},  // 39     1  0.03%    0.03%  41.67%
  {180224,   22,    2,  169},  // 40     1  0.03%    0.03%  29.41%
  {262144,   32,    2,  171},  // 41     1  0.02%    0.03%  45.45%
};
#elif TCMALLOC_PAGE_SHIFT == 15
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_rate = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 2497},  //  0  4096  0.15%    1.60%   0.00%
  {    16,    1,   32, 2497},  //  1  2048  0.15%    1.60% 100.00%
  {    32,    1,   32, 2497},  //  2  1024  0.15%    1.60% 100.00%
  {    64,    1,   32, 2497},  //  3   512  0.15%    1.60% 100.00%
  {    72,    1,   32, 1169},  //  4   455  0.17%    1.60%  12.50%
  {    80,    1,   32, 1694},  //  5   409  0.29%    1.60%  11.11%
  {    96,    1,   32, 2497},  //  6   341  0.24%    1.60%  20.00%
  {   104,    1,   32,  700},  //  7   315  0.17%    1.60%   8.33%
  {   112,    1,   32,  812},  //  8   292  0.34%    1.60%   7.69%
  {   128,    1,   32, 1856},  //  9   256  0.15%    1.60%  14.29%
  {   144,    1,   32,  871},  // 10   227  0.39%    1.60%  12.50%
  {   176,    1,   32, 1027},  // 11   186  0.24%    1.60%  22.22%
  {   200,    1,   32,  684},  // 12   163  0.66%    1.60%  13.64%
  {   256,    1,   32, 1367},  // 13   128  0.15%    1.60%  28.00%
  {   320,    1,   32,  634},  // 14   102  0.54%    1.60%  25.00%
  {   400,    1,   32,  575},  // 15    81  1.27%    1.60%  25.00%
  {   512,    1,   32,  611},  // 16    64  0.15%    1.60%  28.00%
  {   576,    1,   32,  268},  // 17    56  1.71%    1.60%  12.50%
  {   704,    1,   32,  406},  // 18    46  1.32%    1.60%  22.22%
  {   832,    1,   32,  311},  // 19    39  1.12%    1.60%  18.18%
  {  1024,    1,   32,  430},  // 20    32  0.15%    1.60%  23.08%
  {  1152,    1,   32,  230},  // 21    28  1.71%    1.60%  12.50%
  {  1408,    1,   32,  265},  // 22    23  1.32%    1.60%  22.22%
  {  1792,    1,   32,  240},  // 23    18  1.71%    1.60%  27.27%
  {  2048,    1,   32,  218},  // 24    16  0.15%    1.60%  14.29%
  {  2176,    1,   30,  199},  // 25    15  0.54%    1.60%   6.25%
  {  2688,    1,   24,  206},  // 26    12  1.71%    1.60%  23.53%
  {  3200,    1,   20,  180},  // 27    10  2.49%    1.60%  19.05%
  {  4096,    1,   16,  355},  // 28     8  0.15%    1.60%  28.00%
  {  4608,    1,   14,  176},  // 29     7  1.71%    1.60%  12.50%
  {  6528,    1,   10,  195},  // 30     5  0.54%    1.60%  41.67%
  {  8192,    1,    8,  202},  // 31     4  0.15%    1.60%  25.49%
  { 10880,    1,    6,  174},  // 32     3  0.54%    1.60%  32.81%
  { 13952,    3,    4,  165},  // 33     7  0.70%    1.60%  28.24%
  { 16384,    1,    4,  185},  // 34     2  0.15%    1.60%  17.43%
  { 19072,    3,    3,  166},  // 35     5  3.04%    1.62%  16.41%
  { 24576,    3,    2,  161},  // 36     4  0.05%    1.60%  28.86%
  { 32768,    1,    2,  182},  // 37     1  0.15%    0.03%  33.33%
  { 38144,    5,    2,  159},  // 38     4  6.90%    3.28%  16.41%
  { 49152,    3,    2,  157},  // 39     2  0.05%    3.16%  28.86%
  { 65536,    2,    2,  167},  // 40     1  0.07%    0.03%  33.33%
  { 81920,    5,    2,  160},  // 41     2  0.03%    4.72%  25.00%
  { 98304,    3,    2,  157},  // 42     1  0.05%    0.03%  20.00%
  {131072,    4,    2,  182},  // 43     1  0.04%    0.03%  33.33%
  {163840,    5,    2,  156},  // 44     1  0.03%    0.03%  25.00%
  {196608,    6,    2,  157},  // 45     1  0.02%    0.03%  20.00%
  {229376,    7,    2,  155},  // 46     1  0.02%    0.03%  16.67%
  {262144,    8,    2,  159},  // 47     1  0.02%    0.03%  14.29%
};
#elif TCMALLOC_PAGE_SHIFT == 18
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_rate = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {    16,    1,   32, 2352},  //  0 16384  0.02%   12.53%   0.00%
  {    32,    1,   32, 2349},  //  1  8192  0.02%   12.53% 100.00%
  {    64,    1,   32, 2349},  //  2  4096  0.02%   12.53% 100.00%
  {    72,    1,   32, 2349},  //  3  3640  0.04%   12.53%  12.50%
  {    80,    1,   32, 2349},  //  4  3276  0.04%   12.53%  11.11%
  {    88,    1,   32,  853},  //  5  2978  0.05%   12.53%  10.00%
  {    96,    1,   32, 1207},  //  6  2730  0.04%   12.53%   9.09%
  {   112,    1,   32, 1507},  //  7  2340  0.04%   12.53%  16.67%
  {   128,    1,   32, 1555},  //  8  2048  0.02%   12.53%  14.29%
  {   160,    1,   32, 2153},  //  9  1638  0.04%   12.53%  25.00%
  {   208,    1,   32, 1006},  // 10  1260  0.04%   12.53%  30.00%
  {   256,    1,   32, 1498},  // 11  1024  0.02%   12.53%  23.08%
  {   336,    1,   32, 1313},  // 12   780  0.04%   12.53%  31.25%
  {   400,    1,   32,  424},  // 13   655  0.07%   12.53%  19.05%
  {   512,    1,   32,  623},  // 14   512  0.02%   12.53%  28.00%
  {   576,    1,   32,  314},  // 15   455  0.04%   12.53%  12.50%
  {   704,    1,   32,  375},  // 16   372  0.12%   12.53%  22.22%
  {   896,    1,   32,  320},  // 17   292  0.21%   12.53%  27.27%
  {  1152,    1,   32,  476},  // 18   227  0.26%   12.53%  28.57%
  {  1408,    1,   32,  235},  // 19   186  0.12%   12.53%  22.22%
  {  1792,    1,   32,  388},  // 20   146  0.21%   12.53%  27.27%
  {  2176,    1,   30,  444},  // 21   120  0.41%   12.53%  21.43%
  {  2560,    1,   25,  213},  // 22   102  0.41%   12.53%  17.65%
  {  2944,    1,   22,  162},  // 23    89  0.07%   12.53%  15.00%
  {  3456,    1,   18,  188},  // 24    75  1.14%   12.54%  17.39%
  {  4096,    1,   16,  327},  // 25    64  0.02%   12.53%  18.52%
  {  5120,    1,   12,  197},  // 26    51  0.41%   12.53%  25.00%
  {  6528,    1,   10,  184},  // 27    40  0.41%   12.53%  27.50%
  {  8192,    1,    8,  203},  // 28    32  0.02%   12.53%  25.49%
  {  9344,    1,    7,  158},  // 29    28  0.21%   12.53%  14.06%
  { 11904,    1,    5,  164},  // 30    22  0.12%   12.53%  27.40%
  { 13696,    1,    4,  156},  // 31    19  0.75%   12.54%  15.05%
  { 16384,    1,    4,  172},  // 32    16  0.02%   12.53%  19.63%
  { 18688,    1,    3,  157},  // 33    14  0.21%   12.54%  14.06%
  { 21760,    1,    3,  150},  // 34    12  0.41%   12.54%  16.44%
  { 26112,    1,    2,  156},  // 35    10  0.41%   12.54%  20.00%
  { 32768,    1,    2,  203},  // 36     8  0.02%   12.53%  25.49%
  { 37376,    1,    2,  150},  // 37     7  0.21%   12.54%  14.06%
  { 43648,    1,    2,  148},  // 38     6  0.12%   12.54%  16.78%
  { 52352,    1,    2,  148},  // 39     5  0.16%   12.54%  19.94%
  { 65536,    1,    2,  150},  // 40     4  0.02%   12.53%  25.18%
  { 74880,    2,    2,  148},  // 41     7  0.03%   12.53%  14.26%
  { 87296,    1,    2,  147},  // 42     3  0.12%   12.54%  16.58%
  {104832,    2,    2,  148},  // 43     5  0.03%   12.54%  20.09%
  {131072,    1,    2,  148},  // 44     2  0.02%   12.53%  25.03%
  {149760,    3,    2,  147},  // 45     5  4.79%   12.88%  14.26%
  {174720,    2,    2,  147},  // 46     3  0.03%   12.54%  16.67%
  {209664,    4,    2,  147},  // 47     5  0.03%   12.54%  20.00%
  {262144,    1,    2,  149},  // 48     1  0.02%    0.03%  25.03%
};
#elif TCMALLOC_PAGE_SHIFT == 12
static_assert(kMaxSize == 8192, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = false,
  .span_size = 48,
  .sampling_rate = 524288,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 2710},  //  0   512  1.16%    0.92%   0.00%
  {    16,    1,   32, 2710},  //  1   256  1.16%    0.92% 100.00%
  {    32,    1,   32, 2712},  //  2   128  1.16%    0.92% 100.00%
  {    64,    1,   32, 2710},  //  3    64  1.16%    0.92% 100.00%
  {    72,    1,   32,  955},  //  4    56  2.70%    0.92%  12.50%
  {    80,    1,   32, 2710},  //  5    51  1.54%    0.92%  11.11%
  {    96,    1,   32, 2232},  //  6    42  2.70%    0.92%  20.00%
  {   112,    1,   32, 1757},  //  7    36  2.70%    0.92%  16.67%
  {   128,    1,   32, 1659},  //  8    32  1.16%    0.92%  14.29%
  {   144,    1,   32, 1334},  //  9    28  2.70%    0.92%  12.50%
  {   160,    1,   32, 1204},  // 10    25  3.47%    0.92%  11.11%
  {   176,    1,   32,  580},  // 11    23  2.32%    0.92%  10.00%
  {   192,    1,   32,  626},  // 12    21  2.70%    0.92%   9.09%
  {   224,    1,   32,  807},  // 13    18  2.70%    0.92%  16.67%
  {   240,    1,   32,  326},  // 14    17  1.54%    0.92%   7.14%
  {   256,    1,   32,  615},  // 15    16  1.16%    0.92%   6.67%
  {   272,    1,   32,  265},  // 16    15  1.54%    0.92%   6.25%
  {   288,    1,   32,  307},  // 17    14  2.70%    0.92%   5.88%
  {   336,    1,   32,  595},  // 18    12  2.70%    0.92%  16.67%
  {   408,    1,   32,  254},  // 19    10  1.54%    0.92%  21.43%
  {   448,    1,   32,  229},  // 20     9  2.70%    0.92%   9.80%
  {   512,    1,   32,  761},  // 21     8  1.16%    0.92%  14.29%
  {   576,    2,   32,  347},  // 22    14  2.14%    0.92%  12.50%
  {   768,    2,   32,  373},  // 23    10  6.80%    0.93%  33.33%
  {   896,    2,   32,  292},  // 24     9  2.14%    0.92%  16.67%
  {  1024,    2,   32,  994},  // 25     8  0.58%    0.92%  14.29%
  {  1280,    3,   32,  220},  // 26     9  6.61%    0.93%  25.00%
  {  1536,    3,   32,  206},  // 27     8  0.39%    0.92%  20.00%
  {  2048,    4,   32,  544},  // 28     8  0.29%    0.92%  33.33%
  {  2688,    4,   24,  217},  // 29     6  1.85%    0.93%  31.25%
  {  4096,    4,   16,  651},  // 30     4  0.29%    0.92%  52.38%
  {  4736,    5,   13,  216},  // 31     4  7.72%    1.77%  15.62%
  {  6144,    3,   10,  169},  // 32     2  0.39%    1.70%  29.73%
  {  7168,    7,    9,  171},  // 33     4  0.17%    1.70%  16.67%
  {  8192,    4,    8,  240},  // 34     2  0.29%    1.70%  14.29%
};
#else
#error "Unsupported TCMALLOC_PAGE_SHIFT value!"
#endif
#else
#if TCMALLOC_PAGE_SHIFT == 13
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_rate = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {    16,    1,   32, 2898},  //  0   512  0.58%    0.42%   0.00%
  {    32,    1,   32, 2899},  //  1   256  0.58%    0.42% 100.00%
  {    64,    1,   32, 2898},  //  2   128  0.58%    0.42% 100.00%
  {    80,    1,   32, 2898},  //  3   102  0.97%    0.42%  25.00%
  {    96,    1,   32, 2898},  //  4    85  0.97%    0.42%  20.00%
  {   112,    1,   32, 1581},  //  5    73  0.78%    0.42%  16.67%
  {   128,    1,   32, 1780},  //  6    64  0.58%    0.42%  14.29%
  {   160,    1,   32, 1895},  //  7    51  0.97%    0.42%  25.00%
  {   208,    1,   32, 1193},  //  8    39  1.55%    0.42%  30.00%
  {   256,    1,   32, 1139},  //  9    32  0.58%    0.42%  23.08%
  {   288,    1,   32,  507},  // 10    28  2.14%    0.42%  12.50%
  {   352,    1,   32,  706},  // 11    23  1.75%    0.42%  22.22%
  {   448,    1,   32,  587},  // 12    18  2.14%    0.42%  27.27%
  {   512,    1,   32,  590},  // 13    16  0.58%    0.42%  14.29%
  {   576,    1,   32,  327},  // 14    14  2.14%    0.42%  12.50%
  {   704,    1,   32,  352},  // 15    11  6.02%    0.43%  22.22%
  {   896,    1,   32,  334},  // 16     9  2.14%    0.43%  27.27%
  {  1024,    1,   32,  466},  // 17     8  0.58%    0.42%  14.29%
  {  1152,    2,   32,  255},  // 18    14  1.85%    0.43%  12.50%
  {  1408,    2,   32,  267},  // 19    11  5.74%    0.43%  22.22%
  {  1792,    2,   32,  266},  // 20     9  1.85%    0.43%  27.27%
  {  2048,    2,   32,  265},  // 21     8  0.29%    0.42%  14.29%
  {  2304,    2,   28,  217},  // 22     7  1.85%    0.43%  12.50%
  {  2688,    2,   24,  207},  // 23     6  1.85%    0.43%  16.67%
  {  3200,    2,   20,  207},  // 24     5  2.63%    0.43%  19.05%
  {  4096,    1,   16,  443},  // 25     2  0.58%    0.43%  28.00%
  {  4736,    3,   13,  195},  // 26     5  3.83%    0.43%  15.62%
  {  6144,    3,   10,  202},  // 27     4  0.19%    0.42%  29.73%
  {  8192,    1,    8,  279},  // 28     1  0.58%    0.03%  33.33%
  { 12288,    3,    5,  201},  // 29     2  0.19%    0.82%  50.00%
  { 16384,    2,    4,  202},  // 30     1  0.29%    0.03%  33.33%
  { 20480,    5,    3,  187},  // 31     2  0.12%    1.21%  25.00%
  { 28672,    7,    2,  191},  // 32     2  0.08%    1.60%  40.00%
  { 32768,    4,    2,  200},  // 33     1  0.15%    0.03%  14.29%
  { 40960,    5,    2,  184},  // 34     1  0.12%    0.03%  25.00%
  { 65536,    8,    2,  191},  // 35     1  0.07%    0.03%  60.00%
  { 73728,    9,    2,  184},  // 36     1  0.07%    0.03%  12.50%
  { 98304,   12,    2,  184},  // 37     1  0.05%    0.03%  33.33%
  {139264,   17,    2,  185},  // 38     1  0.03%    0.03%  41.67%
  {180224,   22,    2,  181},  // 39     1  0.03%    0.03%  29.41%
  {262144,   32,    2,  181},  // 40     1  0.02%    0.03%  45.45%
};
#elif TCMALLOC_PAGE_SHIFT == 15
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_rate = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 2611},  //  0  4096  0.15%    1.60%   0.00%
  {    16,    1,   32, 2611},  //  1  2048  0.15%    1.60% 100.00%
  {    32,    1,   32, 2611},  //  2  1024  0.15%    1.60% 100.00%
  {    64,    1,   32, 2611},  //  3   512  0.15%    1.60% 100.00%
  {    80,    1,   32, 2611},  //  4   409  0.29%    1.60%  25.00%
  {    96,    1,   32, 2438},  //  5   341  0.24%    1.60%  20.00%
  {   112,    1,   32, 1321},  //  6   292  0.34%    1.60%  16.67%
  {   128,    1,   32, 1814},  //  7   256  0.15%    1.60%  14.29%
  {   144,    1,   32,  858},  //  8   227  0.39%    1.60%  12.50%
  {   176,    1,   32, 1010},  //  9   186  0.24%    1.60%  22.22%
  {   208,    1,   32,  747},  // 10   157  0.49%    1.60%  18.18%
  {   256,    1,   32, 1268},  // 11   128  0.15%    1.60%  23.08%
  {   320,    1,   32,  627},  // 12   102  0.54%    1.60%  25.00%
  {   400,    1,   32,  570},  // 13    81  1.27%    1.60%  25.00%
  {   512,    1,   32,  606},  // 14    64  0.15%    1.60%  28.00%
  {   576,    1,   32,  272},  // 15    56  1.71%    1.60%  12.50%
  {   704,    1,   32,  407},  // 16    46  1.32%    1.60%  22.22%
  {   832,    1,   32,  314},  // 17    39  1.12%    1.60%  18.18%
  {  1024,    1,   32,  430},  // 18    32  0.15%    1.60%  23.08%
  {  1152,    1,   32,  236},  // 19    28  1.71%    1.60%  12.50%
  {  1408,    1,   32,  269},  // 20    23  1.32%    1.60%  22.22%
  {  1792,    1,   32,  245},  // 21    18  1.71%    1.60%  27.27%
  {  2048,    1,   32,  223},  // 22    16  0.15%    1.60%  14.29%
  {  2176,    1,   30,  205},  // 23    15  0.54%    1.60%   6.25%
  {  2688,    1,   24,  212},  // 24    12  1.71%    1.60%  23.53%
  {  3200,    1,   20,  187},  // 25    10  2.49%    1.60%  19.05%
  {  4096,    1,   16,  356},  // 26     8  0.15%    1.60%  28.00%
  {  4608,    1,   14,  182},  // 27     7  1.71%    1.60%  12.50%
  {  6528,    1,   10,  201},  // 28     5  0.54%    1.60%  41.67%
  {  8192,    1,    8,  208},  // 29     4  0.15%    1.60%  25.49%
  { 10880,    1,    6,  181},  // 30     3  0.54%    1.60%  32.81%
  { 13952,    3,    4,  172},  // 31     7  0.70%    1.60%  28.24%
  { 16384,    1,    4,  191},  // 32     2  0.15%    1.60%  17.43%
  { 19072,    3,    3,  172},  // 33     5  3.04%    1.62%  16.41%
  { 24576,    3,    2,  168},  // 34     4  0.05%    1.60%  28.86%
  { 32768,    1,    2,  189},  // 35     1  0.15%    0.03%  33.33%
  { 38144,    5,    2,  166},  // 36     4  6.90%    3.28%  16.41%
  { 49152,    3,    2,  164},  // 37     2  0.05%    3.16%  28.86%
  { 65536,    2,    2,  173},  // 38     1  0.07%    0.03%  33.33%
  { 81920,    5,    2,  167},  // 39     2  0.03%    4.72%  25.00%
  { 98304,    3,    2,  164},  // 40     1  0.05%    0.03%  20.00%
  {131072,    4,    2,  189},  // 41     1  0.04%    0.03%  33.33%
  {163840,    5,    2,  163},  // 42     1  0.03%    0.03%  25.00%
  {196608,    6,    2,  164},  // 43     1  0.02%    0.03%  20.00%
  {229376,    7,    2,  162},  // 44     1  0.02%    0.03%  16.67%
  {262144,    8,    2,  166},  // 45     1  0.02%    0.03%  14.29%
};
#elif TCMALLOC_PAGE_SHIFT == 18
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_rate = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {    16,    1,   32, 2450},  //  0 16384  0.02%   12.53%   0.00%
  {    32,    1,   32, 2450},  //  1  8192  0.02%   12.53% 100.00%
  {    64,    1,   32, 2450},  //  2  4096  0.02%   12.53% 100.00%
  {    80,    1,   32, 2450},  //  3  3276  0.04%   12.53%  25.00%
  {    96,    1,   32, 2147},  //  4  2730  0.04%   12.53%  20.00%
  {   112,    1,   32, 1710},  //  5  2340  0.04%   12.53%  16.67%
  {   128,    1,   32, 1766},  //  6  2048  0.02%   12.53%  14.29%
  {   160,    1,   32, 2450},  //  7  1638  0.04%   12.53%  25.00%
  {   208,    1,   32, 1136},  //  8  1260  0.04%   12.53%  30.00%
  {   256,    1,   32, 1700},  //  9  1024  0.02%   12.53%  23.08%
  {   336,    1,   32, 1489},  // 10   780  0.04%   12.53%  31.25%
  {   400,    1,   32,  471},  // 11   655  0.07%   12.53%  19.05%
  {   512,    1,   32,  699},  // 12   512  0.02%   12.53%  28.00%
  {   576,    1,   32,  346},  // 13   455  0.04%   12.53%  12.50%
  {   704,    1,   32,  414},  // 14   372  0.12%   12.53%  22.22%
  {   896,    1,   32,  352},  // 15   292  0.21%   12.53%  27.27%
  {  1152,    1,   32,  530},  // 16   227  0.26%   12.53%  28.57%
  {  1408,    1,   32,  255},  // 17   186  0.12%   12.53%  22.22%
  {  1792,    1,   32,  428},  // 18   146  0.21%   12.53%  27.27%
  {  2176,    1,   30,  494},  // 19   120  0.41%   12.53%  21.43%
  {  2560,    1,   25,  230},  // 20   102  0.41%   12.53%  17.65%
  {  2944,    1,   22,  170},  // 21    89  0.07%   12.53%  15.00%
  {  3456,    1,   18,  201},  // 22    75  1.14%   12.54%  17.39%
  {  4096,    1,   16,  359},  // 23    64  0.02%   12.53%  18.52%
  {  5120,    1,   12,  211},  // 24    51  0.41%   12.53%  25.00%
  {  6528,    1,   10,  195},  // 25    40  0.41%   12.53%  27.50%
  {  8192,    1,    8,  218},  // 26    32  0.02%   12.53%  25.49%
  {  9344,    1,    7,  166},  // 27    28  0.21%   12.53%  14.06%
  { 11904,    1,    5,  173},  // 28    22  0.12%   12.53%  27.40%
  { 13696,    1,    4,  163},  // 29    19  0.75%   12.54%  15.05%
  { 16384,    1,    4,  183},  // 30    16  0.02%   12.53%  19.63%
  { 18688,    1,    3,  165},  // 31    14  0.21%   12.54%  14.06%
  { 21760,    1,    3,  157},  // 32    12  0.41%   12.54%  16.44%
  { 26112,    1,    2,  164},  // 33    10  0.41%   12.54%  20.00%
  { 32768,    1,    2,  218},  // 34     8  0.02%   12.53%  25.49%
  { 37376,    1,    2,  157},  // 35     7  0.21%   12.54%  14.06%
  { 43648,    1,    2,  154},  // 36     6  0.12%   12.54%  16.78%
  { 52352,    1,    2,  154},  // 37     5  0.16%   12.54%  19.94%
  { 65536,    1,    2,  157},  // 38     4  0.02%   12.53%  25.18%
  { 74880,    2,    2,  154},  // 39     7  0.03%   12.53%  14.26%
  { 87296,    1,    2,  153},  // 40     3  0.12%   12.54%  16.58%
  {104832,    2,    2,  154},  // 41     5  0.03%   12.54%  20.09%
  {131072,    1,    2,  154},  // 42     2  0.02%   12.53%  25.03%
  {149760,    3,    2,  153},  // 43     5  4.79%   12.88%  14.26%
  {174720,    2,    2,  150},  // 44     3  0.03%   12.54%  16.67%
  {209664,    4,    2,  153},  // 45     5  0.03%   12.54%  20.00%
  {262144,    1,    2,  157},  // 46     1  0.02%    0.03%  25.03%
};
#elif TCMALLOC_PAGE_SHIFT == 12
static_assert(kMaxSize == 8192, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = false,
  .span_size = 48,
  .sampling_rate = 524288,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 3111},  //  0   512  1.16%    0.92%   0.00%
  {    16,    1,   32, 3111},  //  1   256  1.16%    0.92% 100.00%
  {    32,    1,   32, 3113},  //  2   128  1.16%    0.92% 100.00%
  {    64,    1,   32, 3111},  //  3    64  1.16%    0.92% 100.00%
  {    80,    1,   32, 3111},  //  4    51  1.54%    0.92%  25.00%
  {    96,    1,   32, 2011},  //  5    42  2.70%    0.92%  20.00%
  {   112,    1,   32, 1592},  //  6    36  2.70%    0.92%  16.67%
  {   128,    1,   32, 1507},  //  7    32  1.16%    0.92%  14.29%
  {   144,    1,   32, 1220},  //  8    28  2.70%    0.92%  12.50%
  {   160,    1,   32, 1106},  //  9    25  3.47%    0.92%  11.11%
  {   192,    1,   32,  962},  // 10    21  2.70%    0.92%  20.00%
  {   224,    1,   32,  757},  // 11    18  2.70%    0.92%  16.67%
  {   240,    1,   32,  331},  // 12    17  1.54%    0.92%   7.14%
  {   256,    1,   32,  586},  // 13    16  1.16%    0.92%   6.67%
  {   272,    1,   32,  278},  // 14    15  1.54%    0.92%   6.25%
  {   288,    1,   32,  316},  // 15    14  2.70%    0.92%   5.88%
  {   336,    1,   32,  570},  // 16    12  2.70%    0.92%  16.67%
  {   400,    1,   32,  266},  // 17    10  3.47%    0.92%  19.05%
  {   448,    1,   32,  251},  // 18     9  2.70%    0.92%  12.00%
  {   512,    1,   32,  716},  // 19     8  1.16%    0.92%  14.29%
  {   576,    2,   32,  351},  // 20    14  2.14%    0.92%  12.50%
  {   768,    2,   32,  374},  // 21    10  6.80%    0.93%  33.33%
  {   896,    2,   32,  302},  // 22     9  2.14%    0.92%  16.67%
  {  1024,    2,   32,  921},  // 23     8  0.58%    0.92%  14.29%
  {  1280,    3,   32,  239},  // 24     9  6.61%    0.93%  25.00%
  {  1536,    3,   32,  228},  // 25     8  0.39%    0.92%  20.00%
  {  2048,    4,   32,  524},  // 26     8  0.29%    0.92%  33.33%
  {  2688,    4,   24,  237},  // 27     6  1.85%    0.93%  31.25%
  {  4096,    4,   16,  618},  // 28     4  0.29%    0.92%  52.38%
  {  4736,    5,   13,  235},  // 29     4  7.72%    1.77%  15.62%
  {  6144,    3,   10,  194},  // 30     2  0.39%    1.70%  29.73%
  {  7168,    7,    9,  196},  // 31     4  0.17%    1.70%  16.67%
  {  8192,    4,    8,  257},  // 32     2  0.29%    1.70%  14.29%
};
#else
#error "Unsupported TCMALLOC_PAGE_SHIFT value!"
#endif
#endif
// clang-format on

static_assert(sizeof(List) / sizeof(List[0]) <= kNumBaseClasses);
extern constexpr SizeClasses kFewerSizeClasses{List, Assumptions};

}  // namespace tcmalloc_internal
}  // namespace tcmalloc
GOOGLE_MALLOC_SECTION_END
