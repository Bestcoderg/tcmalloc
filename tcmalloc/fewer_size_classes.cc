// Copyright 2019 The TCMalloc Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "absl/types/span.h"
#include "tcmalloc/common.h"
#include "tcmalloc/internal/config.h"
#include "tcmalloc/size_class_info.h"

GOOGLE_MALLOC_SECTION_BEGIN
namespace tcmalloc {
namespace tcmalloc_internal {

// Columns in the following tables:
// - bytes: size of the size class
// - pages: number of pages per span
// - batch: preferred number of objects for transfers between caches
// - cap: maximum cpu cache capacity
// - class: size class number
// - objs: number of objects per span
// - waste/fixed: fixed per-size-class overhead due to end-of-span fragmentation
//   and other factors. For instance, if we have a 96 byte size class, and use
//   a single 8KiB page, then we will hold 85 objects per span, and have 32
//   bytes left over. There is also a fixed component of 48 bytes of TCMalloc
//   metadata per span. Together, the fixed overhead would be wasted/allocated
//   = (32 + 48) / (8192 - 32) ~= 0.98%.
// - waste/sampling: overhead due to heap sampling
//   (rounding to page size, proxy object, metadata).
// - inc: increment from the previous size class. This caps the dynamic
//   overhead component based on mismatches between the number of bytes
//   requested and the number of bytes provided by the size class. Together
//   they sum to the total overhead; for instance if you asked for a 50-byte
//   allocation that rounds up to a 64-byte size class, the dynamic overhead
//   would be 28%, and if waste were 22% it would mean (on average) 25 bytes
//   of overhead for allocations of that size.

// clang-format off
#if defined(__cpp_aligned_new) && __STDCPP_DEFAULT_NEW_ALIGNMENT__ <= 8
#if TCMALLOC_PAGE_SHIFT == 13
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_rate = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {    16,    1,   32, 2761},  //  0   512  0.58%    0.42%   0.00%
  {    32,    1,   32, 2761},  //  1   256  0.58%    0.42% 100.00%
  {    64,    1,   32, 2761},  //  2   128  0.58%    0.42% 100.00%
  {    72,    1,   32, 1766},  //  3   113  1.26%    0.42%  12.50%
  {    80,    1,   32, 2761},  //  4   102  0.97%    0.42%  11.11%
  {    96,    1,   32, 2761},  //  5    85  0.97%    0.42%  20.00%
  {   112,    1,   32, 1514},  //  6    73  0.78%    0.42%  16.67%
  {   128,    1,   32, 1704},  //  7    64  0.58%    0.42%  14.29%
  {   160,    1,   32, 1814},  //  8    51  0.97%    0.42%  25.00%
  {   208,    1,   32, 1142},  //  9    39  1.55%    0.42%  30.00%
  {   256,    1,   32, 1091},  // 10    32  0.58%    0.42%  23.08%
  {   312,    1,   32,  650},  // 11    26  1.55%    0.42%  21.88%
  {   352,    1,   32,  510},  // 12    23  1.75%    0.42%  12.82%
  {   448,    1,   32,  561},  // 13    18  2.14%    0.42%  27.27%
  {   512,    1,   32,  565},  // 14    16  0.58%    0.42%  14.29%
  {   576,    1,   32,  313},  // 15    14  2.14%    0.42%  12.50%
  {   704,    1,   32,  337},  // 16    11  6.02%    0.43%  22.22%
  {   896,    1,   32,  319},  // 17     9  2.14%    0.43%  27.27%
  {  1152,    2,   32,  515},  // 18    14  1.85%    0.43%  28.57%
  {  1408,    2,   32,  255},  // 19    11  5.74%    0.43%  22.22%
  {  1792,    2,   32,  255},  // 20     9  1.85%    0.43%  27.27%
  {  2048,    2,   32,  252},  // 21     8  0.29%    0.42%  14.29%
  {  2304,    2,   28,  206},  // 22     7  1.85%    0.43%  12.50%
  {  2688,    2,   24,  197},  // 23     6  1.85%    0.43%  16.67%
  {  3200,    2,   20,  197},  // 24     5  2.63%    0.43%  19.05%
  {  4096,    1,   16,  423},  // 25     2  0.58%    0.43%  28.00%
  {  6144,    3,   10,  208},  // 26     4  0.19%    0.42%  50.00%
  {  8192,    1,    8,  266},  // 27     1  0.58%    0.03%  33.33%
  { 12288,    3,    5,  191},  // 28     2  0.19%    0.82%  50.00%
  { 16384,    2,    4,  193},  // 29     1  0.29%    0.03%  33.33%
  { 20480,    5,    3,  178},  // 30     2  0.12%    1.21%  25.00%
  { 28672,    7,    2,  182},  // 31     2  0.08%    1.60%  40.00%
  { 32768,    4,    2,  190},  // 32     1  0.15%    0.03%  14.29%
  { 40960,    5,    2,  175},  // 33     1  0.12%    0.03%  25.00%
  { 65536,    8,    2,  182},  // 34     1  0.07%    0.03%  60.00%
  { 73728,    9,    2,  175},  // 35     1  0.07%    0.03%  12.50%
  { 98304,   12,    2,  175},  // 36     1  0.05%    0.03%  33.33%
  {139264,   17,    2,  177},  // 37     1  0.03%    0.03%  41.67%
  {180224,   22,    2,  168},  // 38     1  0.03%    0.03%  29.41%
  {262144,   32,    2,  173},  // 39     1  0.02%    0.03%  45.45%
};
#elif TCMALLOC_PAGE_SHIFT == 15
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_rate = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 2761},  //  0  4096  0.15%    1.60%   0.00%
  {    16,    1,   32, 2761},  //  1  2048  0.15%    1.60% 100.00%
  {    32,    1,   32, 2761},  //  2  1024  0.15%    1.60% 100.00%
  {    64,    1,   32, 2761},  //  3   512  0.15%    1.60% 100.00%
  {    80,    1,   32, 2761},  //  4   409  0.29%    1.60%  25.00%
  {    96,    1,   32, 2577},  //  5   341  0.24%    1.60%  20.00%
  {   112,    1,   32, 1395},  //  6   292  0.34%    1.60%  16.67%
  {   128,    1,   32, 1918},  //  7   256  0.15%    1.60%  14.29%
  {   144,    1,   32,  906},  //  8   227  0.39%    1.60%  12.50%
  {   192,    1,   32, 1507},  //  9   170  0.54%    1.60%  33.33%
  {   256,    1,   32, 1507},  // 10   128  0.15%    1.60%  33.33%
  {   320,    1,   32,  663},  // 11   102  0.54%    1.60%  25.00%
  {   400,    1,   32,  603},  // 12    81  1.27%    1.60%  25.00%
  {   512,    1,   32,  639},  // 13    64  0.15%    1.60%  28.00%
  {   640,    1,   32,  443},  // 14    51  0.54%    1.60%  25.00%
  {   768,    1,   32,  349},  // 15    42  1.71%    1.60%  20.00%
  {  1024,    1,   32,  535},  // 16    32  0.15%    1.60%  33.33%
  {  1408,    1,   32,  360},  // 17    23  1.32%    1.60%  37.50%
  {  2048,    1,   32,  322},  // 18    16  0.15%    1.60%  45.45%
  {  2304,    1,   28,  232},  // 19    14  1.71%    1.60%  12.50%
  {  2944,    1,   22,  220},  // 20    11  1.32%    1.60%  27.78%
  {  4096,    1,   16,  391},  // 21     8  0.15%    1.60%  39.13%
  {  4608,    1,   14,  191},  // 22     7  1.71%    1.60%  12.50%
  {  6528,    1,   10,  212},  // 23     5  0.54%    1.60%  41.67%
  {  8192,    1,    8,  220},  // 24     4  0.15%    1.60%  25.49%
  { 10880,    1,    6,  190},  // 25     3  0.54%    1.60%  32.81%
  { 16384,    1,    4,  210},  // 26     2  0.15%    1.60%  50.59%
  { 24576,    3,    2,  187},  // 27     4  0.05%    1.60%  50.00%
  { 32768,    1,    2,  198},  // 28     1  0.15%    0.03%  33.33%
  { 40960,    4,    2,  175},  // 29     3  6.28%    3.28%  25.00%
  { 65536,    2,    2,  183},  // 30     1  0.07%    0.03%  60.00%
  { 81920,    5,    2,  175},  // 31     2  0.03%    4.72%  25.00%
  {131072,    4,    2,  200},  // 32     1  0.04%    0.03%  60.00%
  {163840,    5,    2,  172},  // 33     1  0.03%    0.03%  25.00%
  {229376,    7,    2,  173},  // 34     1  0.02%    0.03%  40.00%
  {262144,    8,    2,  174},  // 35     1  0.02%    0.03%  14.29%
};
#elif TCMALLOC_PAGE_SHIFT == 18
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_rate = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {    16,    1,   32, 2645},  //  0 16384  0.02%   12.53%   0.00%
  {    32,    1,   32, 2644},  //  1  8192  0.02%   12.53% 100.00%
  {    64,    1,   32, 2644},  //  2  4096  0.02%   12.53% 100.00%
  {    72,    1,   32, 2644},  //  3  3640  0.04%   12.53%  12.50%
  {    88,    1,   32, 2644},  //  4  2978  0.05%   12.53%  22.22%
  {   104,    1,   32, 1672},  //  5  2520  0.04%   12.53%  18.18%
  {   128,    1,   32, 2320},  //  6  2048  0.02%   12.53%  23.08%
  {   160,    1,   32, 2112},  //  7  1638  0.04%   12.53%  25.00%
  {   208,    1,   32,  999},  //  8  1260  0.04%   12.53%  30.00%
  {   256,    1,   32, 1477},  //  9  1024  0.02%   12.53%  23.08%
  {   336,    1,   32, 1297},  // 10   780  0.04%   12.53%  31.25%
  {   400,    1,   32,  435},  // 11   655  0.07%   12.53%  19.05%
  {   512,    1,   32,  627},  // 12   512  0.02%   12.53%  28.00%
  {   704,    1,   32,  546},  // 13   372  0.12%   12.53%  37.50%
  {   896,    1,   32,  334},  // 14   292  0.21%   12.53%  27.27%
  {  1152,    1,   32,  485},  // 15   227  0.26%   12.53%  28.57%
  {  1408,    1,   32,  252},  // 16   186  0.12%   12.53%  22.22%
  {  1792,    1,   32,  399},  // 17   146  0.21%   12.53%  27.27%
  {  2176,    1,   30,  454},  // 18   120  0.41%   12.53%  21.43%
  {  2688,    1,   24,  235},  // 19    97  0.56%   12.53%  23.53%
  {  3328,    1,   19,  212},  // 20    78  0.99%   12.54%  23.81%
  {  4096,    1,   16,  343},  // 21    64  0.02%   12.53%  23.08%
  {  5120,    1,   12,  214},  // 22    51  0.41%   12.53%  25.00%
  {  6528,    1,   10,  201},  // 23    40  0.41%   12.53%  27.50%
  {  8448,    1,    7,  223},  // 24    31  0.12%   12.53%  29.41%
  { 11392,    1,    5,  186},  // 25    23  0.07%   12.53%  34.85%
  { 13696,    1,    4,  177},  // 26    19  0.75%   12.54%  20.22%
  { 16384,    1,    4,  190},  // 27    16  0.02%   12.53%  19.63%
  { 18688,    1,    3,  176},  // 28    14  0.21%   12.54%  14.06%
  { 21760,    1,    3,  169},  // 29    12  0.41%   12.54%  16.44%
  { 26112,    1,    2,  174},  // 30    10  0.41%   12.54%  20.00%
  { 32768,    1,    2,  221},  // 31     8  0.02%   12.53%  25.49%
  { 43648,    1,    2,  169},  // 32     6  0.12%   12.54%  33.20%
  { 52352,    1,    2,  167},  // 33     5  0.16%   12.54%  19.94%
  { 65536,    1,    2,  169},  // 34     4  0.02%   12.53%  25.18%
  { 74880,    2,    2,  167},  // 35     7  0.03%   12.53%  14.26%
  { 87296,    1,    2,  165},  // 36     3  0.12%   12.54%  16.58%
  {104832,    2,    2,  167},  // 37     5  0.03%   12.54%  20.09%
  {131072,    1,    2,  167},  // 38     2  0.02%   12.53%  25.03%
  {174720,    2,    2,  165},  // 39     3  0.03%   12.54%  33.30%
  {209664,    4,    2,  165},  // 40     5  0.03%   12.54%  20.00%
  {262144,    1,    2,  168},  // 41     1  0.02%    0.03%  25.03%
};
#elif TCMALLOC_PAGE_SHIFT == 12
static_assert(kMaxSize == 8192, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = false,
  .span_size = 48,
  .sampling_rate = 524288,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {    16,    1,   32, 3515},  //  0   256  1.16%    0.92%   0.00%
  {    32,    1,   32, 3518},  //  1   128  1.16%    0.92% 100.00%
  {    64,    1,   32, 3515},  //  2    64  1.16%    0.92% 100.00%
  {    80,    1,   32, 3515},  //  3    51  1.54%    0.92%  25.00%
  {   104,    1,   32, 3515},  //  4    39  2.12%    0.92%  30.00%
  {   128,    1,   32, 3399},  //  5    32  1.16%    0.92%  23.08%
  {   176,    1,   32, 3320},  //  6    23  2.32%    0.92%  37.50%
  {   224,    1,   32, 1471},  //  7    18  2.70%    0.92%  27.27%
  {   256,    1,   32,  882},  //  8    16  1.16%    0.92%  14.29%
  {   272,    1,   32,  271},  //  9    15  1.54%    0.92%   6.25%
  {   336,    1,   32,  822},  // 10    12  2.70%    0.92%  23.53%
  {   448,    1,   32,  335},  // 11     9  2.70%    0.92%  33.33%
  {   576,    2,   32, 1026},  // 12    14  2.14%    0.92%  28.57%
  {   768,    2,   32,  384},  // 13    10  6.80%    0.93%  33.33%
  {  1024,    2,   32, 1208},  // 14     8  0.58%    0.92%  33.33%
  {  1536,    3,   32,  266},  // 15     8  0.39%    0.92%  50.00%
  {  2304,    4,   28,  599},  // 16     7  1.85%    0.92%  50.00%
  {  4096,    4,   16,  700},  // 17     4  0.29%    0.92%  77.78%
  {  6144,    3,   10,  220},  // 18     2  0.39%    1.70%  50.00%
  {  8192,    4,    8,  247},  // 19     2  0.29%    1.70%  33.33%
};
#else
#error "Unsupported TCMALLOC_PAGE_SHIFT value!"
#endif
#else
#if TCMALLOC_PAGE_SHIFT == 13
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_rate = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {    16,    1,   32, 2881},  //  0   512  0.58%    0.42%   0.00%
  {    32,    1,   32, 2884},  //  1   256  0.58%    0.42% 100.00%
  {    64,    1,   32, 2881},  //  2   128  0.58%    0.42% 100.00%
  {    80,    1,   32, 2881},  //  3   102  0.97%    0.42%  25.00%
  {    96,    1,   32, 2881},  //  4    85  0.97%    0.42%  20.00%
  {   112,    1,   32, 1571},  //  5    73  0.78%    0.42%  16.67%
  {   128,    1,   32, 1770},  //  6    64  0.58%    0.42%  14.29%
  {   160,    1,   32, 1884},  //  7    51  0.97%    0.42%  25.00%
  {   208,    1,   32, 1186},  //  8    39  1.55%    0.42%  30.00%
  {   256,    1,   32, 1133},  //  9    32  0.58%    0.42%  23.08%
  {   288,    1,   32,  504},  // 10    28  2.14%    0.42%  12.50%
  {   352,    1,   32,  702},  // 11    23  1.75%    0.42%  22.22%
  {   448,    1,   32,  584},  // 12    18  2.14%    0.42%  27.27%
  {   512,    1,   32,  587},  // 13    16  0.58%    0.42%  14.29%
  {   576,    1,   32,  325},  // 14    14  2.14%    0.42%  12.50%
  {   704,    1,   32,  350},  // 15    11  6.02%    0.43%  22.22%
  {   896,    1,   32,  332},  // 16     9  2.14%    0.43%  27.27%
  {  1024,    1,   32,  463},  // 17     8  0.58%    0.42%  14.29%
  {  1152,    2,   32,  253},  // 18    14  1.85%    0.43%  12.50%
  {  1408,    2,   32,  266},  // 19    11  5.74%    0.43%  22.22%
  {  1792,    2,   32,  264},  // 20     9  1.85%    0.43%  27.27%
  {  2048,    2,   32,  263},  // 21     8  0.29%    0.42%  14.29%
  {  2304,    2,   28,  215},  // 22     7  1.85%    0.43%  12.50%
  {  2688,    2,   24,  205},  // 23     6  1.85%    0.43%  16.67%
  {  3200,    2,   20,  205},  // 24     5  2.63%    0.43%  19.05%
  {  4096,    1,   16,  440},  // 25     2  0.58%    0.43%  28.00%
  {  4736,    3,   13,  194},  // 26     5  3.83%    0.43%  15.62%
  {  6144,    3,   10,  201},  // 27     4  0.19%    0.42%  29.73%
  {  8192,    1,    8,  277},  // 28     1  0.58%    0.03%  33.33%
  { 12288,    3,    5,  200},  // 29     2  0.19%    0.82%  50.00%
  { 16384,    2,    4,  201},  // 30     1  0.29%    0.03%  33.33%
  { 20480,    5,    3,  186},  // 31     2  0.12%    1.21%  25.00%
  { 24576,    3,    2,  186},  // 32     1  0.19%    0.03%  20.00%
  { 28672,    7,    2,  184},  // 33     2  0.08%    1.60%  16.67%
  { 32768,    4,    2,  198},  // 34     1  0.15%    0.03%  14.29%
  { 40960,    5,    2,  183},  // 35     1  0.12%    0.03%  25.00%
  { 65536,    8,    2,  190},  // 36     1  0.07%    0.03%  60.00%
  { 73728,    9,    2,  183},  // 37     1  0.07%    0.03%  12.50%
  { 98304,   12,    2,  183},  // 38     1  0.05%    0.03%  33.33%
  {139264,   17,    2,  184},  // 39     1  0.03%    0.03%  41.67%
  {180224,   22,    2,  180},  // 40     1  0.03%    0.03%  29.41%
  {262144,   32,    2,  180},  // 41     1  0.02%    0.03%  45.45%
};
#elif TCMALLOC_PAGE_SHIFT == 15
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_rate = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 2730},  //  0  4096  0.15%    1.60%   0.00%
  {    16,    1,   32, 2730},  //  1  2048  0.15%    1.60% 100.00%
  {    32,    1,   32, 2730},  //  2  1024  0.15%    1.60% 100.00%
  {    64,    1,   32, 2730},  //  3   512  0.15%    1.60% 100.00%
  {    80,    1,   32, 2730},  //  4   409  0.29%    1.60%  25.00%
  {    96,    1,   32, 2549},  //  5   341  0.24%    1.60%  20.00%
  {   112,    1,   32, 1380},  //  6   292  0.34%    1.60%  16.67%
  {   128,    1,   32, 1897},  //  7   256  0.15%    1.60%  14.29%
  {   144,    1,   32,  896},  //  8   227  0.39%    1.60%  12.50%
  {   192,    1,   32, 1490},  //  9   170  0.54%    1.60%  33.33%
  {   256,    1,   32, 1490},  // 10   128  0.15%    1.60%  33.33%
  {   320,    1,   32,  656},  // 11   102  0.54%    1.60%  25.00%
  {   400,    1,   32,  596},  // 12    81  1.27%    1.60%  25.00%
  {   512,    1,   32,  632},  // 13    64  0.15%    1.60%  28.00%
  {   640,    1,   32,  439},  // 14    51  0.54%    1.60%  25.00%
  {   768,    1,   32,  345},  // 15    42  1.71%    1.60%  20.00%
  {  1024,    1,   32,  529},  // 16    32  0.15%    1.60%  33.33%
  {  1408,    1,   32,  356},  // 17    23  1.32%    1.60%  37.50%
  {  2048,    1,   32,  319},  // 18    16  0.15%    1.60%  45.45%
  {  2304,    1,   28,  229},  // 19    14  1.71%    1.60%  12.50%
  {  2944,    1,   22,  217},  // 20    11  1.32%    1.60%  27.78%
  {  4096,    1,   16,  387},  // 21     8  0.15%    1.60%  39.13%
  {  4608,    1,   14,  189},  // 22     7  1.71%    1.60%  12.50%
  {  6528,    1,   10,  209},  // 23     5  0.54%    1.60%  41.67%
  {  8192,    1,    8,  217},  // 24     4  0.15%    1.60%  25.49%
  { 10880,    1,    6,  188},  // 25     3  0.54%    1.60%  32.81%
  { 13952,    3,    4,  179},  // 26     7  0.70%    1.60%  28.24%
  { 16384,    1,    4,  200},  // 27     2  0.15%    1.60%  17.43%
  { 24576,    3,    2,  185},  // 28     4  0.05%    1.60%  50.00%
  { 32768,    1,    2,  196},  // 29     1  0.15%    0.03%  33.33%
  { 38144,    5,    2,  172},  // 30     4  6.90%    3.28%  16.41%
  { 49152,    3,    2,  172},  // 31     2  0.05%    3.16%  28.86%
  { 65536,    2,    2,  181},  // 32     1  0.07%    0.03%  33.33%
  { 81920,    5,    2,  173},  // 33     2  0.03%    4.72%  25.00%
  {131072,    4,    2,  197},  // 34     1  0.04%    0.03%  60.00%
  {163840,    5,    2,  170},  // 35     1  0.03%    0.03%  25.00%
  {229376,    7,    2,  171},  // 36     1  0.02%    0.03%  40.00%
  {262144,    8,    2,  172},  // 37     1  0.02%    0.03%  14.29%
};
#elif TCMALLOC_PAGE_SHIFT == 18
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_rate = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {    16,    1,   32, 2502},  //  0 16384  0.02%   12.53%   0.00%
  {    32,    1,   32, 2500},  //  1  8192  0.02%   12.53% 100.00%
  {    64,    1,   32, 2500},  //  2  4096  0.02%   12.53% 100.00%
  {    80,    1,   32, 2500},  //  3  3276  0.04%   12.53%  25.00%
  {    96,    1,   32, 2191},  //  4  2730  0.04%   12.53%  20.00%
  {   112,    1,   32, 1746},  //  5  2340  0.04%   12.53%  16.67%
  {   128,    1,   32, 1802},  //  6  2048  0.02%   12.53%  14.29%
  {   160,    1,   32, 2500},  //  7  1638  0.04%   12.53%  25.00%
  {   208,    1,   32, 1160},  //  8  1260  0.04%   12.53%  30.00%
  {   256,    1,   32, 1735},  //  9  1024  0.02%   12.53%  23.08%
  {   336,    1,   32, 1520},  // 10   780  0.04%   12.53%  31.25%
  {   400,    1,   32,  481},  // 11   655  0.07%   12.53%  19.05%
  {   512,    1,   32,  713},  // 12   512  0.02%   12.53%  28.00%
  {   704,    1,   32,  615},  // 13   372  0.12%   12.53%  37.50%
  {   896,    1,   32,  359},  // 14   292  0.21%   12.53%  27.27%
  {  1152,    1,   32,  541},  // 15   227  0.26%   12.53%  28.57%
  {  1408,    1,   32,  260},  // 16   186  0.12%   12.53%  22.22%
  {  1792,    1,   32,  437},  // 17   146  0.21%   12.53%  27.27%
  {  2176,    1,   30,  504},  // 18   120  0.41%   12.53%  21.43%
  {  2688,    1,   24,  240},  // 19    97  0.56%   12.53%  23.53%
  {  3328,    1,   19,  212},  // 20    78  0.99%   12.54%  23.81%
  {  4096,    1,   16,  370},  // 21    64  0.02%   12.53%  23.08%
  {  5120,    1,   12,  215},  // 22    51  0.41%   12.53%  25.00%
  {  6528,    1,   10,  199},  // 23    40  0.41%   12.53%  27.50%
  {  8448,    1,    7,  226},  // 24    31  0.12%   12.53%  29.41%
  { 11392,    1,    5,  182},  // 25    23  0.07%   12.53%  34.85%
  { 13696,    1,    4,  171},  // 26    19  0.75%   12.54%  20.22%
  { 16384,    1,    4,  187},  // 27    16  0.02%   12.53%  19.63%
  { 18688,    1,    3,  168},  // 28    14  0.21%   12.54%  14.06%
  { 21760,    1,    3,  160},  // 29    12  0.41%   12.54%  16.44%
  { 26112,    1,    2,  167},  // 30    10  0.41%   12.54%  20.00%
  { 32768,    1,    2,  222},  // 31     8  0.02%   12.53%  25.49%
  { 37376,    1,    2,  160},  // 32     7  0.21%   12.54%  14.06%
  { 43648,    1,    2,  157},  // 33     6  0.12%   12.54%  16.78%
  { 52352,    1,    2,  157},  // 34     5  0.16%   12.54%  19.94%
  { 65536,    1,    2,  160},  // 35     4  0.02%   12.53%  25.18%
  { 74880,    2,    2,  157},  // 36     7  0.03%   12.53%  14.26%
  { 87296,    1,    2,  156},  // 37     3  0.12%   12.54%  16.58%
  {104832,    2,    2,  157},  // 38     5  0.03%   12.54%  20.09%
  {131072,    1,    2,  157},  // 39     2  0.02%   12.53%  25.03%
  {174720,    2,    2,  156},  // 40     3  0.03%   12.54%  33.30%
  {209664,    4,    2,  156},  // 41     5  0.03%   12.54%  20.00%
  {262144,    1,    2,  160},  // 42     1  0.02%    0.03%  25.03%
};
#elif TCMALLOC_PAGE_SHIFT == 12
static_assert(kMaxSize == 8192, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = false,
  .span_size = 48,
  .sampling_rate = 524288,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {    16,    1,   32, 3692},  //  0   256  1.16%    0.92%   0.00%
  {    32,    1,   32, 3692},  //  1   128  1.16%    0.92% 100.00%
  {    64,    1,   32, 3692},  //  2    64  1.16%    0.92% 100.00%
  {    80,    1,   32, 3692},  //  3    51  1.54%    0.92%  25.00%
  {    96,    1,   32, 2661},  //  4    42  2.70%    0.92%  20.00%
  {   128,    1,   32, 3692},  //  5    32  1.16%    0.92%  33.33%
  {   160,    1,   32, 2636},  //  6    25  3.47%    0.92%  25.00%
  {   192,    1,   32, 1141},  //  7    21  2.70%    0.92%  20.00%
  {   224,    1,   32,  874},  //  8    18  2.70%    0.92%  16.67%
  {   256,    1,   32,  836},  //  9    16  1.16%    0.92%  14.29%
  {   272,    1,   32,  287},  // 10    15  1.54%    0.92%   6.25%
  {   336,    1,   32,  782},  // 11    12  2.70%    0.92%  23.53%
  {   448,    1,   32,  344},  // 12     9  2.70%    0.92%  33.33%
  {   576,    2,   32,  968},  // 13    14  2.14%    0.92%  28.57%
  {   768,    2,   32,  388},  // 14    10  6.80%    0.93%  33.33%
  {  1024,    2,   32, 1130},  // 15     8  0.58%    0.92%  33.33%
  {  1536,    3,   32,  281},  // 16     8  0.39%    0.92%  50.00%
  {  2048,    4,   32,  550},  // 17     8  0.29%    0.92%  33.33%
  {  2688,    4,   24,  230},  // 18     6  1.85%    0.93%  31.25%
  {  4096,    4,   16,  651},  // 19     4  0.29%    0.92%  52.38%
  {  6144,    3,   10,  240},  // 20     2  0.39%    1.70%  50.00%
  {  8192,    4,    8,  265},  // 21     2  0.29%    1.70%  33.33%
};
#else
#error "Unsupported TCMALLOC_PAGE_SHIFT value!"
#endif
#endif
// clang-format on

static_assert(sizeof(List) / sizeof(List[0]) <= kNumBaseClasses);
extern constexpr SizeClasses kFewerSizeClasses{List, Assumptions};

}  // namespace tcmalloc_internal
}  // namespace tcmalloc
GOOGLE_MALLOC_SECTION_END
