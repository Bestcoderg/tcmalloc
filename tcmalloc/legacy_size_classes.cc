// Copyright 2019 The TCMalloc Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "absl/types/span.h"
#include "tcmalloc/common.h"
#include "tcmalloc/internal/config.h"
#include "tcmalloc/size_class_info.h"

GOOGLE_MALLOC_SECTION_BEGIN
namespace tcmalloc {
namespace tcmalloc_internal {

// Columns in the following tables:
// - bytes: size of the size class
// - pages: number of pages per span
// - batch: preferred number of objects for transfers between caches
// - cap: maximum cpu cache capacity
// - class: size class number
// - objs: number of objects per span
// - waste/fixed: fixed per-size-class overhead due to end-of-span fragmentation
//   and other factors. For instance, if we have a 96 byte size class, and use
//   a single 8KiB page, then we will hold 85 objects per span, and have 32
//   bytes left over. There is also a fixed component of 48 bytes of TCMalloc
//   metadata per span. Together, the fixed overhead would be wasted/allocated
//   = (32 + 48) / (8192 - 32) ~= 0.98%.
// - waste/sampling: overhead due to heap sampling
//   (rounding to page size, proxy object, metadata).
// - inc: increment from the previous size class. This caps the dynamic
//   overhead component based on mismatches between the number of bytes
//   requested and the number of bytes provided by the size class. Together
//   they sum to the total overhead; for instance if you asked for a 50-byte
//   allocation that rounds up to a 64-byte size class, the dynamic overhead
//   would be 28%, and if waste were 22% it would mean (on average) 25 bytes
//   of overhead for allocations of that size.

// clang-format off
#if defined(__cpp_aligned_new) && __STDCPP_DEFAULT_NEW_ALIGNMENT__ <= 8
#if TCMALLOC_PAGE_SHIFT == 13
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_interval = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 2190},  //  0  1024  0.58%    0.42%   0.00%
  {    16,    1,   32, 2190},  //  1   512  0.58%    0.42% 100.00%
  {    24,    1,   32, 2190},  //  2   341  0.68%    0.42%  50.00%
  {    32,    1,   32, 2190},  //  3   256  0.58%    0.42%  33.33%
  {    40,    1,   32, 2190},  //  4   204  0.97%    0.42%  25.00%
  {    48,    1,   32, 1977},  //  5   170  0.97%    0.42%  20.00%
  {    56,    1,   32,  979},  //  6   146  0.78%    0.42%  16.67%
  {    64,    1,   32, 1403},  //  7   128  0.58%    0.42%  14.29%
  {    72,    1,   32,  702},  //  8   113  1.26%    0.42%  12.50%
  {    80,    1,   32,  560},  //  9   102  0.97%    0.42%  11.11%
  {    88,    1,   32,  682},  // 10    93  0.68%    0.42%  10.00%
  {    96,    1,   32,  467},  // 11    85  0.97%    0.42%   9.09%
  {   104,    1,   32,  367},  // 12    78  1.55%    0.42%   8.33%
  {   112,    1,   32,  367},  // 13    73  0.78%    0.42%   7.69%
  {   120,    1,   32,  291},  // 14    68  0.97%    0.42%   7.14%
  {   128,    1,   32,  511},  // 15    64  0.58%    0.42%   6.67%
  {   136,    1,   32,  259},  // 16    60  0.97%    0.42%   6.25%
  {   144,    1,   32,  282},  // 17    56  2.14%    0.42%   5.88%
  {   152,    1,   32,  243},  // 18    53  2.23%    0.42%   5.56%
  {   160,    1,   32,  248},  // 19    51  0.97%    0.42%   5.26%
  {   168,    1,   32,  268},  // 20    48  2.14%    0.42%   5.00%
  {   184,    1,   32,  258},  // 21    44  1.75%    0.42%   9.52%
  {   192,    1,   32,  237},  // 22    42  2.14%    0.42%   4.35%
  {   208,    1,   32,  212},  // 23    39  1.55%    0.42%   8.33%
  {   224,    1,   32,  213},  // 24    36  2.14%    0.42%   7.69%
  {   240,    1,   32,  202},  // 25    34  0.97%    0.42%   7.14%
  {   256,    1,   32,  328},  // 26    32  0.58%    0.42%   6.67%
  {   264,    1,   32,  157},  // 27    31  0.68%    0.42%   3.12%
  {   280,    1,   32,  193},  // 28    29  1.46%    0.42%   6.06%
  {   312,    1,   32,  215},  // 29    26  1.55%    0.42%  11.43%
  {   336,    1,   32,  217},  // 30    24  2.14%    0.42%   7.69%
  {   352,    1,   32,  155},  // 31    23  1.75%    0.42%   4.76%
  {   384,    1,   32,  174},  // 32    21  2.14%    0.42%   9.09%
  {   408,    1,   32,  167},  // 33    20  0.97%    0.42%   6.25%
  {   448,    1,   32,  171},  // 34    18  2.14%    0.42%   9.80%
  {   480,    1,   32,  180},  // 35    17  0.97%    0.42%   7.14%
  {   512,    1,   32,  211},  // 36    16  0.58%    0.42%   6.67%
  {   576,    1,   32,  181},  // 37    14  2.14%    0.42%  12.50%
  {   640,    1,   32,  164},  // 38    12  6.80%    0.43%  11.11%
  {   704,    1,   32,  159},  // 39    11  6.02%    0.43%  10.00%
  {   768,    1,   32,  154},  // 40    10  6.80%    0.43%   9.09%
  {   896,    1,   32,  168},  // 41     9  2.14%    0.43%  16.67%
  {  1024,    1,   32,  224},  // 42     8  0.58%    0.42%  14.29%
  {  1152,    2,   32,  164},  // 43    14  1.85%    0.43%  12.50%
  {  1280,    2,   32,  154},  // 44    12  6.52%    0.43%  11.11%
  {  1408,    2,   32,  148},  // 45    11  5.74%    0.43%  10.00%
  {  1536,    2,   32,  152},  // 46    10  6.52%    0.43%   9.09%
  {  1792,    2,   32,  148},  // 47     9  1.85%    0.43%  16.67%
  {  2048,    2,   32,  163},  // 48     8  0.29%    0.42%  14.29%
  {  2304,    2,   28,  147},  // 49     7  1.85%    0.43%  12.50%
  {  2688,    2,   24,  144},  // 50     6  1.85%    0.43%  16.67%
  {  3200,    2,   20,  144},  // 51     5  2.63%    0.43%  19.05%
  {  3584,    4,   18,  141},  // 52     9  1.71%    0.43%  12.00%
  {  4096,    1,   16,  213},  // 53     2  0.58%    0.43%  14.29%
  {  4736,    3,   13,  145},  // 54     5  3.83%    0.43%  15.62%
  {  5376,    2,   12,  139},  // 55     3  1.85%    0.43%  13.51%
  {  6144,    3,   10,  141},  // 56     4  0.19%    0.42%  14.29%
  {  6528,    4,   10,  138},  // 57     5  0.54%    0.43%   6.25%
  {  7168,    7,    9,  139},  // 58     8  0.08%    0.42%   9.80%
  {  8192,    1,    8,  164},  // 59     1  0.58%    0.03%  14.29%
  {  9472,    5,    6,  139},  // 60     4  7.61%    0.85%  15.62%
  { 10240,    4,    6,  138},  // 61     3  6.39%    0.85%   8.11%
  { 12288,    3,    5,  140},  // 62     2  0.19%    0.82%  20.00%
  { 13568,    5,    4,  138},  // 63     3  0.74%    0.82%  10.42%
  { 14336,    7,    4,  137},  // 64     4  0.08%    0.82%   5.66%
  { 16384,    2,    4,  141},  // 65     1  0.29%    0.03%  14.29%
  { 20480,    5,    3,  139},  // 66     2  0.12%    1.21%  25.00%
  { 24576,    3,    2,  138},  // 67     1  0.19%    0.03%  20.00%
  { 28672,    7,    2,  138},  // 68     2  0.08%    1.60%  16.67%
  { 32768,    4,    2,  147},  // 69     1  0.15%    0.03%  14.29%
  { 40960,    5,    2,  138},  // 70     1  0.12%    0.03%  25.00%
  { 49152,    6,    2,  137},  // 71     1  0.10%    0.03%  20.00%
  { 57344,    7,    2,  137},  // 72     1  0.08%    0.03%  16.67%
  { 65536,    8,    2,  140},  // 73     1  0.07%    0.03%  14.29%
  { 73728,    9,    2,  137},  // 74     1  0.07%    0.03%  12.50%
  { 81920,   10,    2,  138},  // 75     1  0.06%    0.03%  11.11%
  { 98304,   12,    2,  138},  // 76     1  0.05%    0.03%  20.00%
  {114688,   14,    2,  137},  // 77     1  0.04%    0.03%  16.67%
  {131072,   16,    2,  137},  // 78     1  0.04%    0.03%  14.29%
  {139264,   17,    2,  137},  // 79     1  0.03%    0.03%   6.25%
  {155648,   19,    2,  137},  // 80     1  0.03%    0.03%  11.76%
  {180224,   22,    2,  135},  // 81     1  0.03%    0.03%  15.79%
  {204800,   25,    2,  137},  // 82     1  0.02%    0.03%  13.64%
  {229376,   28,    2,  137},  // 83     1  0.02%    0.03%  12.00%
  {262144,   32,    2,  137},  // 84     1  0.02%    0.03%  14.29%
};
#elif TCMALLOC_PAGE_SHIFT == 15
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_interval = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 2314},  //  0  4096  0.15%    1.60%   0.00%
  {    16,    1,   32, 2314},  //  1  2048  0.15%    1.60% 100.00%
  {    24,    1,   32, 2314},  //  2  1365  0.17%    1.60%  50.00%
  {    32,    1,   32, 2314},  //  3  1024  0.15%    1.60%  33.33%
  {    40,    1,   32, 2279},  //  4   819  0.17%    1.60%  25.00%
  {    48,    1,   32, 2314},  //  5   682  0.24%    1.60%  20.00%
  {    56,    1,   32, 1158},  //  6   585  0.17%    1.60%  16.67%
  {    64,    1,   32, 1404},  //  7   512  0.15%    1.60%  14.29%
  {    72,    1,   32,  659},  //  8   455  0.17%    1.60%  12.50%
  {    80,    1,   32,  469},  //  9   409  0.29%    1.60%  11.11%
  {    88,    1,   32,  485},  // 10   372  0.24%    1.60%  10.00%
  {    96,    1,   32,  523},  // 11   341  0.24%    1.60%   9.09%
  {   104,    1,   32,  451},  // 12   315  0.17%    1.60%   8.33%
  {   112,    1,   32,  297},  // 13   292  0.34%    1.60%   7.69%
  {   120,    1,   32,  269},  // 14   273  0.17%    1.60%   7.14%
  {   128,    1,   32,  556},  // 15   256  0.15%    1.60%   6.67%
  {   144,    1,   32,  338},  // 16   227  0.39%    1.60%  12.50%
  {   160,    1,   32,  307},  // 17   204  0.54%    1.60%  11.11%
  {   176,    1,   32,  302},  // 18   186  0.24%    1.60%  10.00%
  {   192,    1,   32,  281},  // 19   170  0.54%    1.60%   9.09%
  {   208,    1,   32,  245},  // 20   157  0.49%    1.60%   8.33%
  {   224,    1,   32,  219},  // 21   146  0.34%    1.60%   7.69%
  {   240,    1,   32,  188},  // 22   136  0.54%    1.60%   7.14%
  {   256,    1,   32,  312},  // 23   128  0.15%    1.60%   6.67%
  {   280,    1,   32,  208},  // 24   117  0.17%    1.60%   9.38%
  {   312,    1,   32,  201},  // 25   105  0.17%    1.60%  11.43%
  {   344,    1,   32,  229},  // 26    95  0.41%    1.60%  10.26%
  {   376,    1,   32,  175},  // 27    87  0.32%    1.60%   9.30%
  {   400,    1,   32,  181},  // 28    81  1.27%    1.60%   6.38%
  {   448,    1,   32,  184},  // 29    73  0.34%    1.60%  12.00%
  {   512,    1,   32,  247},  // 30    64  0.15%    1.60%  14.29%
  {   576,    1,   32,  177},  // 31    56  1.71%    1.60%  12.50%
  {   640,    1,   32,  199},  // 32    51  0.54%    1.60%  11.11%
  {   704,    1,   32,  173},  // 33    46  1.32%    1.60%  10.00%
  {   768,    1,   32,  175},  // 34    42  1.71%    1.60%   9.09%
  {   896,    1,   32,  181},  // 35    36  1.71%    1.60%  16.67%
  {  1024,    1,   32,  218},  // 36    32  0.15%    1.60%  14.29%
  {  1152,    1,   32,  166},  // 37    28  1.71%    1.60%  12.50%
  {  1280,    1,   32,  160},  // 38    25  2.49%    1.60%  11.11%
  {  1536,    1,   32,  178},  // 39    21  1.71%    1.60%  20.00%
  {  1664,    1,   32,  153},  // 40    19  3.66%    1.60%   8.33%
  {  1920,    1,   32,  155},  // 41    17  0.54%    1.60%  15.38%
  {  2048,    1,   32,  163},  // 42    16  0.15%    1.60%   6.67%
  {  2176,    1,   30,  160},  // 43    15  0.54%    1.60%   6.25%
  {  2432,    1,   26,  154},  // 44    13  3.66%    1.60%  11.76%
  {  2688,    1,   24,  150},  // 45    12  1.71%    1.60%  10.53%
  {  2944,    1,   22,  148},  // 46    11  1.32%    1.60%   9.52%
  {  3200,    1,   20,  149},  // 47    10  2.49%    1.60%   8.70%
  {  3584,    1,   18,  148},  // 48     9  1.71%    1.60%  12.00%
  {  4096,    1,   16,  204},  // 49     8  0.15%    1.60%  14.29%
  {  4608,    1,   14,  151},  // 50     7  1.71%    1.60%  12.50%
  {  5376,    1,   12,  149},  // 51     6  1.71%    1.60%  16.67%
  {  6528,    1,   10,  153},  // 52     5  0.54%    1.60%  21.43%
  {  8192,    1,    8,  169},  // 53     4  0.15%    1.60%  25.49%
  {  9344,    2,    7,  148},  // 54     7  0.27%    1.60%  14.06%
  { 10880,    1,    6,  146},  // 55     3  0.54%    1.60%  16.44%
  { 13056,    2,    5,  148},  // 56     5  0.46%    1.60%  20.00%
  { 13952,    3,    4,  145},  // 57     7  0.70%    1.60%   6.86%
  { 16384,    1,    4,  164},  // 58     2  0.15%    1.60%  17.43%
  { 19072,    3,    3,  147},  // 59     5  3.04%    1.62%  16.41%
  { 21760,    2,    3,  146},  // 60     3  0.46%    1.60%  14.09%
  { 24576,    3,    2,  146},  // 61     4  0.05%    1.60%  12.94%
  { 28672,    7,    2,  146},  // 62     8  0.02%    1.60%  16.67%
  { 32768,    1,    2,  151},  // 63     1  0.15%    0.03%  14.29%
  { 38144,    5,    2,  146},  // 64     4  6.90%    3.28%  16.41%
  { 40960,    4,    2,  138},  // 65     3  6.28%    3.28%   7.38%
  { 49152,    3,    2,  145},  // 66     2  0.05%    3.16%  20.00%
  { 57344,    7,    2,  145},  // 67     4  0.02%    3.16%  16.67%
  { 65536,    2,    2,  148},  // 68     1  0.07%    0.03%  14.29%
  { 81920,    5,    2,  146},  // 69     2  0.03%    4.72%  25.00%
  { 98304,    3,    2,  145},  // 70     1  0.05%    0.03%  20.00%
  {114688,    7,    2,  145},  // 71     2  0.02%    6.28%  16.67%
  {131072,    4,    2,  154},  // 72     1  0.04%    0.03%  14.29%
  {163840,    5,    2,  145},  // 73     1  0.03%    0.03%  25.00%
  {196608,    6,    2,  145},  // 74     1  0.02%    0.03%  20.00%
  {229376,    7,    2,  145},  // 75     1  0.02%    0.03%  16.67%
  {262144,    8,    2,  146},  // 76     1  0.02%    0.03%  14.29%
};
#elif TCMALLOC_PAGE_SHIFT == 18
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_interval = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 2089},  //  0 32768  0.02%   12.53%   0.00%
  {    16,    1,   32, 2089},  //  1 16384  0.02%   12.53% 100.00%
  {    24,    1,   32, 2089},  //  2 10922  0.02%   12.53%  50.00%
  {    32,    1,   32, 2089},  //  3  8192  0.02%   12.53%  33.33%
  {    40,    1,   32, 2041},  //  4  6553  0.03%   12.53%  25.00%
  {    48,    1,   32, 2050},  //  5  5461  0.02%   12.53%  20.00%
  {    56,    1,   32,  854},  //  6  4681  0.02%   12.53%  16.67%
  {    64,    1,   32, 2089},  //  7  4096  0.02%   12.53%  14.29%
  {    72,    1,   32,  900},  //  8  3640  0.04%   12.53%  12.50%
  {    80,    1,   32,  572},  //  9  3276  0.04%   12.53%  11.11%
  {    88,    1,   32,  402},  // 10  2978  0.05%   12.53%  10.00%
  {    96,    1,   32,  419},  // 11  2730  0.04%   12.53%   9.09%
  {   104,    1,   32,  264},  // 12  2520  0.04%   12.53%   8.33%
  {   112,    1,   32,  391},  // 13  2340  0.04%   12.53%   7.69%
  {   128,    1,   32,  468},  // 14  2048  0.02%   12.53%  14.29%
  {   144,    1,   32,  437},  // 15  1820  0.04%   12.53%  12.50%
  {   160,    1,   32,  388},  // 16  1638  0.04%   12.53%  11.11%
  {   176,    1,   32,  305},  // 17  1489  0.05%   12.53%  10.00%
  {   192,    1,   32,  293},  // 18  1365  0.04%   12.53%   9.09%
  {   208,    1,   32,  222},  // 19  1260  0.04%   12.53%   8.33%
  {   232,    1,   32,  277},  // 20  1129  0.10%   12.53%  11.54%
  {   256,    1,   32,  323},  // 21  1024  0.02%   12.53%  10.34%
  {   280,    1,   32,  230},  // 22   936  0.04%   12.53%   9.38%
  {   304,    1,   32,  233},  // 23   862  0.05%   12.53%   8.57%
  {   336,    1,   32,  252},  // 24   780  0.04%   12.53%  10.53%
  {   384,    1,   32,  195},  // 25   682  0.12%   12.53%  14.29%
  {   448,    1,   32,  245},  // 26   585  0.04%   12.53%  16.67%
  {   480,    1,   32,  150},  // 27   546  0.04%   12.53%   7.14%
  {   512,    1,   32,  200},  // 28   512  0.02%   12.53%   6.67%
  {   576,    1,   32,  174},  // 29   455  0.04%   12.53%  12.50%
  {   640,    1,   32,  189},  // 30   409  0.16%   12.53%  11.11%
  {   704,    1,   32,  160},  // 31   372  0.12%   12.53%  10.00%
  {   768,    1,   32,  160},  // 32   341  0.12%   12.53%   9.09%
  {   896,    1,   32,  168},  // 33   292  0.21%   12.53%  16.67%
  {  1024,    1,   32,  210},  // 34   256  0.02%   12.53%  14.29%
  {  1152,    1,   32,  163},  // 35   227  0.26%   12.53%  12.50%
  {  1280,    1,   32,  154},  // 36   204  0.41%   12.53%  11.11%
  {  1408,    1,   32,  144},  // 37   186  0.12%   12.53%  10.00%
  {  1664,    1,   32,  187},  // 38   157  0.36%   12.53%  18.18%
  {  1920,    1,   32,  159},  // 39   136  0.41%   12.53%  15.38%
  {  2048,    1,   32,  154},  // 40   128  0.02%   12.53%   6.67%
  {  2304,    1,   28,  152},  // 41   113  0.70%   12.53%  12.50%
  {  2560,    1,   25,  141},  // 42   102  0.41%   12.53%  11.11%
  {  2688,    1,   24,  147},  // 43    97  0.56%   12.53%   5.00%
  {  3072,    1,   21,  137},  // 44    85  0.41%   12.53%  14.29%
  {  3328,    1,   19,  137},  // 45    78  0.99%   12.54%   8.33%
  {  3584,    1,   18,  134},  // 46    73  0.21%   12.53%   7.69%
  {  3840,    1,   17,  134},  // 47    68  0.41%   12.53%   7.14%
  {  4096,    1,   16,  198},  // 48    64  0.02%   12.53%   6.67%
  {  4224,    1,   15,  133},  // 49    62  0.12%   12.53%   3.12%
  {  4480,    1,   14,  136},  // 50    58  0.90%   12.54%   6.06%
  {  4736,    1,   13,  134},  // 51    55  0.65%   12.54%   5.71%
  {  5120,    1,   12,  136},  // 52    51  0.41%   12.53%   8.11%
  {  5504,    1,   11,  133},  // 53    47  1.34%   12.54%   7.50%
  {  6144,    1,   10,  134},  // 54    42  1.58%   12.54%  11.63%
  {  6528,    1,   10,  133},  // 55    40  0.41%   12.53%   6.25%
  {  7168,    1,    9,  132},  // 56    36  1.58%   12.54%   9.80%
  {  8192,    1,    8,  144},  // 57    32  0.02%   12.53%  14.29%
  {  9344,    1,    7,  134},  // 58    28  0.21%   12.53%  14.06%
  { 10368,    1,    6,  132},  // 59    25  1.14%   12.54%  10.96%
  { 11392,    1,    5,  132},  // 60    23  0.07%   12.53%   9.88%
  { 12416,    1,    5,  133},  // 61    21  0.56%   12.54%   8.99%
  { 13696,    1,    4,  133},  // 62    19  0.75%   12.54%  10.31%
  { 15360,    1,    4,  132},  // 63    17  0.41%   12.54%  12.15%
  { 16384,    1,    4,  136},  // 64    16  0.02%   12.53%   6.67%
  { 17408,    1,    3,  132},  // 65    15  0.41%   12.54%   6.25%
  { 18688,    1,    3,  132},  // 66    14  0.21%   12.54%   7.35%
  { 20096,    1,    3,  132},  // 67    13  0.36%   12.54%   7.53%
  { 21760,    1,    3,  132},  // 68    12  0.41%   12.54%   8.28%
  { 23808,    1,    2,  132},  // 69    11  0.12%   12.53%   9.41%
  { 26112,    1,    2,  132},  // 70    10  0.41%   12.54%   9.68%
  { 29056,    1,    2,  132},  // 71     9  0.26%   12.54%  11.27%
  { 32768,    1,    2,  146},  // 72     8  0.02%   12.53%  12.78%
  { 37376,    1,    2,  132},  // 73     7  0.21%   12.54%  14.06%
  { 43648,    1,    2,  132},  // 74     6  0.12%   12.54%  16.78%
  { 45568,    2,    2,  131},  // 75    11  4.40%   12.63%   4.40%
  { 52352,    1,    2,  131},  // 76     5  0.16%   12.54%  14.89%
  { 56064,    2,    2,  131},  // 77     9  3.77%   12.63%   7.09%
  { 65536,    1,    2,  132},  // 78     4  0.02%   12.53%  16.89%
  { 74880,    2,    2,  132},  // 79     7  0.03%   12.53%  14.26%
  { 87296,    1,    2,  131},  // 80     3  0.12%   12.54%  16.58%
  {104832,    2,    2,  131},  // 81     5  0.03%   12.54%  20.09%
  {112256,    3,    2,  113},  // 82     7  0.09%   12.54%   7.08%
  {131072,    1,    2,  132},  // 83     2  0.02%   12.53%  16.76%
  {149760,    3,    2,  131},  // 84     5  4.79%   12.88%  14.26%
  {174720,    2,    2,  131},  // 85     3  0.03%   12.54%  16.67%
  {209664,    4,    2,  131},  // 86     5  0.03%   12.54%  20.00%
  {262144,    1,    2,  132},  // 87     1  0.02%    0.03%  25.03%
};
#elif TCMALLOC_PAGE_SHIFT == 12
static_assert(kMaxSize == 8192, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = false,
  .span_size = 48,
  .sampling_interval = 524288,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 2795},  //  0   512  1.16%    0.92%   0.00%
  {    16,    1,   32, 2795},  //  1   256  1.16%    0.92% 100.00%
  {    24,    1,   32, 2795},  //  2   170  1.54%    0.92%  50.00%
  {    32,    1,   32, 2795},  //  3   128  1.16%    0.92%  33.33%
  {    40,    1,   32, 2795},  //  4   102  1.54%    0.92%  25.00%
  {    48,    1,   32, 2170},  //  5    85  1.54%    0.92%  20.00%
  {    56,    1,   32, 1549},  //  6    73  1.35%    0.92%  16.67%
  {    64,    1,   32, 2316},  //  7    64  1.16%    0.92%  14.29%
  {    72,    1,   32,  807},  //  8    56  2.70%    0.92%  12.50%
  {    80,    1,   32,  786},  //  9    51  1.54%    0.92%  11.11%
  {    88,    1,   32,  607},  // 10    46  2.32%    0.92%  10.00%
  {    96,    1,   32,  480},  // 11    42  2.70%    0.92%   9.09%
  {   104,    1,   32,  519},  // 12    39  2.12%    0.92%   8.33%
  {   112,    1,   32,  307},  // 13    36  2.70%    0.92%   7.69%
  {   128,    1,   32,  692},  // 14    32  1.16%    0.92%  14.29%
  {   144,    1,   32,  550},  // 15    28  2.70%    0.92%  12.50%
  {   160,    1,   32,  546},  // 16    25  3.47%    0.92%  11.11%
  {   176,    1,   32,  310},  // 17    23  2.32%    0.92%  10.00%
  {   192,    1,   32,  317},  // 18    21  2.70%    0.92%   9.09%
  {   208,    1,   32,  291},  // 19    19  4.63%    0.92%   8.33%
  {   224,    1,   32,  276},  // 20    18  2.70%    0.92%   7.69%
  {   240,    1,   32,  272},  // 21    17  1.54%    0.92%   7.14%
  {   256,    1,   32,  367},  // 22    16  1.16%    0.92%   6.67%
  {   272,    1,   32,  222},  // 23    15  1.54%    0.92%   6.25%
  {   312,    1,   32,  236},  // 24    13  2.12%    0.92%  14.71%
  {   336,    1,   32,  273},  // 25    12  2.70%    0.92%   7.69%
  {   368,    1,   32,  201},  // 26    11  2.32%    0.92%   9.52%
  {   448,    1,   32,  217},  // 27     9  2.70%    0.92%  21.74%
  {   512,    1,   32,  400},  // 28     8  1.16%    0.92%  14.29%
  {   576,    2,   32,  244},  // 29    14  2.14%    0.92%  12.50%
  {   704,    2,   32,  188},  // 30    11  6.02%    0.92%  22.22%
  {   768,    2,   32,  203},  // 31    10  6.80%    0.93%   9.09%
  {   896,    2,   32,  254},  // 32     9  2.14%    0.92%  16.67%
  {  1024,    2,   32,  793},  // 33     8  0.58%    0.92%  14.29%
  {  1152,    3,   32,  192},  // 34    10  6.61%    0.93%  12.50%
  {  1536,    3,   32,  188},  // 35     8  0.39%    0.92%  33.33%
  {  1792,    4,   32,  183},  // 36     9  1.85%    0.92%  16.67%
  {  2048,    4,   32,  217},  // 37     8  0.29%    0.92%  14.29%
  {  2688,    4,   24,  184},  // 38     6  1.85%    0.93%  31.25%
  {  3200,    4,   20,  179},  // 39     5  2.63%    0.93%  19.05%
  {  4096,    4,   16,  424},  // 40     4  0.29%    0.92%  28.00%
  {  4736,    5,   13,  190},  // 41     4  7.72%    1.77%  15.62%
  {  6144,    3,   10,  172},  // 42     2  0.39%    1.70%  29.73%
  {  7168,    7,    9,  176},  // 43     4  0.17%    1.70%  16.67%
  {  8192,    4,    8,  205},  // 44     2  0.29%    1.70%  14.29%
};
#else
#error "Unsupported TCMALLOC_PAGE_SHIFT value!"
#endif
#else
#if TCMALLOC_PAGE_SHIFT == 13
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_interval = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 2518},  //  0  1024  0.58%    0.42%   0.00%
  {    16,    1,   32, 2518},  //  1   512  0.58%    0.42% 100.00%
  {    32,    1,   32, 2523},  //  2   256  0.58%    0.42% 100.00%
  {    48,    1,   32, 2518},  //  3   170  0.97%    0.42%  50.00%
  {    64,    1,   32, 2518},  //  4   128  0.58%    0.42%  33.33%
  {    80,    1,   32, 1265},  //  5   102  0.97%    0.42%  25.00%
  {    96,    1,   32, 1142},  //  6    85  0.97%    0.42%  20.00%
  {   112,    1,   32,  677},  //  7    73  0.78%    0.42%  16.67%
  {   128,    1,   32,  757},  //  8    64  0.58%    0.42%  14.29%
  {   144,    1,   32,  460},  //  9    56  2.14%    0.42%  12.50%
  {   160,    1,   32,  403},  // 10    51  0.97%    0.42%  11.11%
  {   176,    1,   32,  371},  // 11    46  1.75%    0.42%  10.00%
  {   192,    1,   32,  345},  // 12    42  2.14%    0.42%   9.09%
  {   208,    1,   32,  243},  // 13    39  1.55%    0.42%   8.33%
  {   224,    1,   32,  243},  // 14    36  2.14%    0.42%   7.69%
  {   240,    1,   32,  231},  // 15    34  0.97%    0.42%   7.14%
  {   256,    1,   32,  376},  // 16    32  0.58%    0.42%   6.67%
  {   272,    1,   32,  210},  // 17    30  0.97%    0.42%   6.25%
  {   288,    1,   32,  215},  // 18    28  2.14%    0.42%   5.88%
  {   304,    1,   32,  188},  // 19    26  4.08%    0.42%   5.56%
  {   320,    1,   32,  224},  // 20    25  2.91%    0.42%   5.26%
  {   336,    1,   32,  216},  // 21    24  2.14%    0.42%   5.00%
  {   352,    1,   32,  178},  // 22    23  1.75%    0.42%   4.76%
  {   368,    1,   32,  173},  // 23    22  1.75%    0.42%   4.55%
  {   384,    1,   32,  186},  // 24    21  2.14%    0.42%   4.35%
  {   400,    1,   32,  178},  // 25    20  2.91%    0.42%   4.17%
  {   416,    1,   32,  179},  // 26    19  4.08%    0.43%   4.00%
  {   448,    1,   32,  188},  // 27    18  2.14%    0.42%   7.69%
  {   480,    1,   32,  207},  // 28    17  0.97%    0.42%   7.14%
  {   512,    1,   32,  242},  // 29    16  0.58%    0.42%   6.67%
  {   576,    1,   32,  208},  // 30    14  2.14%    0.42%  12.50%
  {   640,    1,   32,  188},  // 31    12  6.80%    0.43%  11.11%
  {   704,    1,   32,  183},  // 32    11  6.02%    0.43%  10.00%
  {   768,    1,   32,  177},  // 33    10  6.80%    0.43%   9.09%
  {   896,    1,   32,  193},  // 34     9  2.14%    0.43%  16.67%
  {  1024,    1,   32,  256},  // 35     8  0.58%    0.42%  14.29%
  {  1152,    2,   32,  188},  // 36    14  1.85%    0.43%  12.50%
  {  1280,    2,   32,  177},  // 37    12  6.52%    0.43%  11.11%
  {  1408,    2,   32,  170},  // 38    11  5.74%    0.43%  10.00%
  {  1536,    2,   32,  175},  // 39    10  6.52%    0.43%   9.09%
  {  1792,    2,   32,  170},  // 40     9  1.85%    0.43%  16.67%
  {  2048,    2,   32,  187},  // 41     8  0.29%    0.42%  14.29%
  {  2304,    2,   28,  168},  // 42     7  1.85%    0.43%  12.50%
  {  2688,    2,   24,  166},  // 43     6  1.85%    0.43%  16.67%
  {  2816,    3,   23,  160},  // 44     8  8.51%    0.44%   4.76%
  {  3200,    2,   20,  164},  // 45     5  2.63%    0.43%  13.64%
  {  3456,    3,   18,  161},  // 46     7  1.75%    0.43%   8.00%
  {  3584,    4,   18,  159},  // 47     9  1.71%    0.43%   3.70%
  {  4096,    1,   16,  245},  // 48     2  0.58%    0.43%  14.29%
  {  4736,    3,   13,  167},  // 49     5  3.83%    0.43%  15.62%
  {  5376,    2,   12,  160},  // 50     3  1.85%    0.43%  13.51%
  {  6144,    3,   10,  162},  // 51     4  0.19%    0.42%  14.29%
  {  6528,    4,   10,  159},  // 52     5  0.54%    0.43%   6.25%
  {  7168,    7,    9,  160},  // 53     8  0.08%    0.42%   9.80%
  {  8192,    1,    8,  187},  // 54     1  0.58%    0.03%  14.29%
  {  9472,    5,    6,  160},  // 55     4  7.61%    0.85%  15.62%
  { 10240,    4,    6,  159},  // 56     3  6.39%    0.85%   8.11%
  { 12288,    3,    5,  161},  // 57     2  0.19%    0.82%  20.00%
  { 13568,    5,    4,  159},  // 58     3  0.74%    0.82%  10.42%
  { 14336,    7,    4,  157},  // 59     4  0.08%    0.82%   5.66%
  { 16384,    2,    4,  162},  // 60     1  0.29%    0.03%  14.29%
  { 20480,    5,    3,  160},  // 61     2  0.12%    1.21%  25.00%
  { 24576,    3,    2,  159},  // 62     1  0.19%    0.03%  20.00%
  { 28672,    7,    2,  159},  // 63     2  0.08%    1.60%  16.67%
  { 32768,    4,    2,  168},  // 64     1  0.15%    0.03%  14.29%
  { 40960,    5,    2,  159},  // 65     1  0.12%    0.03%  25.00%
  { 49152,    6,    2,  157},  // 66     1  0.10%    0.03%  20.00%
  { 57344,    7,    2,  157},  // 67     1  0.08%    0.03%  16.67%
  { 65536,    8,    2,  161},  // 68     1  0.07%    0.03%  14.29%
  { 73728,    9,    2,  157},  // 69     1  0.07%    0.03%  12.50%
  { 81920,   10,    2,  159},  // 70     1  0.06%    0.03%  11.11%
  { 90112,   11,    2,  157},  // 71     1  0.05%    0.03%  10.00%
  { 98304,   12,    2,  157},  // 72     1  0.05%    0.03%   9.09%
  {106496,   13,    2,  157},  // 73     1  0.05%    0.03%   8.33%
  {114688,   14,    2,  157},  // 74     1  0.04%    0.03%   7.69%
  {131072,   16,    2,  157},  // 75     1  0.04%    0.03%  14.29%
  {139264,   17,    2,  157},  // 76     1  0.03%    0.03%   6.25%
  {147456,   18,    2,  157},  // 77     1  0.03%    0.03%   5.88%
  {155648,   19,    2,  157},  // 78     1  0.03%    0.03%   5.56%
  {172032,   21,    2,  157},  // 79     1  0.03%    0.03%  10.53%
  {188416,   23,    2,  157},  // 80     1  0.03%    0.03%   9.52%
  {204800,   25,    2,  157},  // 81     1  0.02%    0.03%   8.70%
  {221184,   27,    2,  157},  // 82     1  0.02%    0.03%   8.00%
  {237568,   29,    2,  157},  // 83     1  0.02%    0.03%   7.41%
  {262144,   32,    2,  157},  // 84     1  0.02%    0.03%  10.34%
};
#elif TCMALLOC_PAGE_SHIFT == 15
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_interval = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 2713},  //  0  4096  0.15%    1.60%   0.00%
  {    16,    1,   32, 2713},  //  1  2048  0.15%    1.60% 100.00%
  {    32,    1,   32, 2713},  //  2  1024  0.15%    1.60% 100.00%
  {    48,    1,   32, 2713},  //  3   682  0.24%    1.60%  50.00%
  {    64,    1,   32, 2713},  //  4   512  0.15%    1.60%  33.33%
  {    80,    1,   32, 1110},  //  5   409  0.29%    1.60%  25.00%
  {    96,    1,   32,  982},  //  6   341  0.24%    1.60%  20.00%
  {   112,    1,   32,  688},  //  7   292  0.34%    1.60%  16.67%
  {   128,    1,   32,  779},  //  8   256  0.15%    1.60%  14.29%
  {   144,    1,   32,  391},  //  9   227  0.39%    1.60%  12.50%
  {   160,    1,   32,  355},  // 10   204  0.54%    1.60%  11.11%
  {   176,    1,   32,  348},  // 11   186  0.24%    1.60%  10.00%
  {   192,    1,   32,  326},  // 12   170  0.54%    1.60%   9.09%
  {   208,    1,   32,  285},  // 13   157  0.49%    1.60%   8.33%
  {   224,    1,   32,  254},  // 14   146  0.34%    1.60%   7.69%
  {   240,    1,   32,  219},  // 15   136  0.54%    1.60%   7.14%
  {   256,    1,   32,  360},  // 16   128  0.15%    1.60%   6.67%
  {   288,    1,   32,  254},  // 17   113  0.83%    1.60%  12.50%
  {   320,    1,   32,  236},  // 18   102  0.54%    1.60%  11.11%
  {   352,    1,   32,  261},  // 19    93  0.24%    1.60%  10.00%
  {   384,    1,   32,  224},  // 20    85  0.54%    1.60%   9.09%
  {   400,    1,   32,  184},  // 21    81  1.27%    1.60%   4.17%
  {   448,    1,   32,  215},  // 22    73  0.34%    1.60%  12.00%
  {   480,    1,   32,  215},  // 23    68  0.54%    1.60%   7.14%
  {   512,    1,   32,  241},  // 24    64  0.15%    1.60%   6.67%
  {   576,    1,   32,  207},  // 25    56  1.71%    1.60%  12.50%
  {   640,    1,   32,  232},  // 26    51  0.54%    1.60%  11.11%
  {   704,    1,   32,  201},  // 27    46  1.32%    1.60%  10.00%
  {   768,    1,   32,  204},  // 28    42  1.71%    1.60%   9.09%
  {   832,    1,   32,  195},  // 29    39  1.12%    1.60%   8.33%
  {   896,    1,   32,  185},  // 30    36  1.71%    1.60%   7.69%
  {  1024,    1,   32,  253},  // 31    32  0.15%    1.60%  14.29%
  {  1152,    1,   32,  195},  // 32    28  1.71%    1.60%  12.50%
  {  1280,    1,   32,  187},  // 33    25  2.49%    1.60%  11.11%
  {  1408,    1,   32,  183},  // 34    23  1.32%    1.60%  10.00%
  {  1536,    1,   32,  193},  // 35    21  1.71%    1.60%   9.09%
  {  1664,    1,   32,  179},  // 36    19  3.66%    1.60%   8.33%
  {  1792,    1,   32,  178},  // 37    18  1.71%    1.60%   7.69%
  {  1920,    1,   32,  174},  // 38    17  0.54%    1.60%   7.14%
  {  2048,    1,   32,  189},  // 39    16  0.15%    1.60%   6.67%
  {  2176,    1,   30,  188},  // 40    15  0.54%    1.60%   6.25%
  {  2304,    1,   28,  175},  // 41    14  1.71%    1.60%   5.88%
  {  2432,    1,   26,  174},  // 42    13  3.66%    1.60%   5.56%
  {  2688,    1,   24,  176},  // 43    12  1.71%    1.60%  10.53%
  {  2944,    1,   22,  174},  // 44    11  1.32%    1.60%   9.52%
  {  3200,    1,   20,  175},  // 45    10  2.49%    1.60%   8.70%
  {  3584,    1,   18,  174},  // 46     9  1.71%    1.60%  12.00%
  {  4096,    1,   16,  237},  // 47     8  0.15%    1.60%  14.29%
  {  4608,    1,   14,  178},  // 48     7  1.71%    1.60%  12.50%
  {  5376,    1,   12,  175},  // 49     6  1.71%    1.60%  16.67%
  {  6528,    1,   10,  179},  // 50     5  0.54%    1.60%  21.43%
  {  7168,    2,    9,  171},  // 51     9  1.63%    1.60%   9.80%
  {  8192,    1,    8,  197},  // 52     4  0.15%    1.60%  14.29%
  {  9344,    2,    7,  174},  // 53     7  0.27%    1.60%  14.06%
  { 10880,    1,    6,  171},  // 54     3  0.54%    1.60%  16.44%
  { 13056,    2,    5,  174},  // 55     5  0.46%    1.60%  20.00%
  { 13952,    3,    4,  170},  // 56     7  0.70%    1.60%   6.86%
  { 16384,    1,    4,  191},  // 57     2  0.15%    1.60%  17.43%
  { 19072,    3,    3,  172},  // 58     5  3.04%    1.62%  16.41%
  { 21760,    2,    3,  171},  // 59     3  0.46%    1.60%  14.09%
  { 24576,    3,    2,  171},  // 60     4  0.05%    1.60%  12.94%
  { 26112,    4,    2,  170},  // 61     5  0.43%    1.60%   6.25%
  { 28672,    7,    2,  170},  // 62     8  0.02%    1.60%   9.80%
  { 32768,    1,    2,  178},  // 63     1  0.15%    0.03%  14.29%
  { 38144,    5,    2,  171},  // 64     4  6.90%    3.28%  16.41%
  { 40960,    4,    2,  162},  // 65     3  6.28%    3.28%   7.38%
  { 49152,    3,    2,  170},  // 66     2  0.05%    3.16%  20.00%
  { 57344,    7,    2,  170},  // 67     4  0.02%    3.16%  16.67%
  { 65536,    2,    2,  174},  // 68     1  0.07%    0.03%  14.29%
  { 81920,    5,    2,  171},  // 69     2  0.03%    4.72%  25.00%
  { 98304,    3,    2,  170},  // 70     1  0.05%    0.03%  20.00%
  {114688,    7,    2,  170},  // 71     2  0.02%    6.28%  16.67%
  {131072,    4,    2,  179},  // 72     1  0.04%    0.03%  14.29%
  {163840,    5,    2,  170},  // 73     1  0.03%    0.03%  25.00%
  {196608,    6,    2,  170},  // 74     1  0.02%    0.03%  20.00%
  {229376,    7,    2,  170},  // 75     1  0.02%    0.03%  16.67%
  {262144,    8,    2,  171},  // 76     1  0.02%    0.03%  14.29%
};
#elif TCMALLOC_PAGE_SHIFT == 18
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_interval = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 2582},  //  0 32768  0.02%   12.53%   0.00%
  {    16,    1,   32, 2582},  //  1 16384  0.02%   12.53% 100.00%
  {    32,    1,   32, 2582},  //  2  8192  0.02%   12.53% 100.00%
  {    48,    1,   32, 2582},  //  3  5461  0.02%   12.53%  50.00%
  {    64,    1,   32, 2582},  //  4  4096  0.02%   12.53%  33.33%
  {    80,    1,   32, 1245},  //  5  3276  0.04%   12.53%  25.00%
  {    96,    1,   32,  668},  //  6  2730  0.04%   12.53%  20.00%
  {   112,    1,   32,  519},  //  7  2340  0.04%   12.53%  16.67%
  {   128,    1,   32,  469},  //  8  2048  0.02%   12.53%  14.29%
  {   144,    1,   32,  441},  //  9  1820  0.04%   12.53%  12.50%
  {   160,    1,   32,  396},  // 10  1638  0.04%   12.53%  11.11%
  {   176,    1,   32,  321},  // 11  1489  0.05%   12.53%  10.00%
  {   192,    1,   32,  309},  // 12  1365  0.04%   12.53%   9.09%
  {   208,    1,   32,  246},  // 13  1260  0.04%   12.53%   8.33%
  {   224,    1,   32,  286},  // 14  1170  0.04%   12.53%   7.69%
  {   240,    1,   32,  184},  // 15  1092  0.04%   12.53%   7.14%
  {   256,    1,   32,  325},  // 16  1024  0.02%   12.53%   6.67%
  {   272,    1,   32,  224},  // 17   963  0.10%   12.53%   6.25%
  {   304,    1,   32,  282},  // 18   862  0.05%   12.53%  11.76%
  {   336,    1,   32,  272},  // 19   780  0.04%   12.53%  10.53%
  {   384,    1,   32,  219},  // 20   682  0.12%   12.53%  14.29%
  {   416,    1,   32,  200},  // 21   630  0.04%   12.53%   8.33%
  {   448,    1,   32,  227},  // 22   585  0.04%   12.53%   7.69%
  {   480,    1,   32,  179},  // 23   546  0.04%   12.53%   7.14%
  {   512,    1,   32,  224},  // 24   512  0.02%   12.53%   6.67%
  {   576,    1,   32,  202},  // 25   455  0.04%   12.53%  12.50%
  {   640,    1,   32,  214},  // 26   409  0.16%   12.53%  11.11%
  {   704,    1,   32,  189},  // 27   372  0.12%   12.53%  10.00%
  {   768,    1,   32,  188},  // 28   341  0.12%   12.53%   9.09%
  {   896,    1,   32,  197},  // 29   292  0.21%   12.53%  16.67%
  {  1024,    1,   32,  234},  // 30   256  0.02%   12.53%  14.29%
  {  1152,    1,   32,  192},  // 31   227  0.26%   12.53%  12.50%
  {  1280,    1,   32,  183},  // 32   204  0.41%   12.53%  11.11%
  {  1408,    1,   32,  173},  // 33   186  0.12%   12.53%  10.00%
  {  1536,    1,   32,  174},  // 34   170  0.41%   12.53%   9.09%
  {  1664,    1,   32,  199},  // 35   157  0.36%   12.53%   8.33%
  {  1920,    1,   32,  188},  // 36   136  0.41%   12.53%  15.38%
  {  2048,    1,   32,  183},  // 37   128  0.02%   12.53%   6.67%
  {  2304,    1,   28,  180},  // 38   113  0.70%   12.53%  12.50%
  {  2560,    1,   25,  170},  // 39   102  0.41%   12.53%  11.11%
  {  2688,    1,   24,  176},  // 40    97  0.56%   12.53%   5.00%
  {  3072,    1,   21,  168},  // 41    85  0.41%   12.53%  14.29%
  {  3328,    1,   19,  166},  // 42    78  0.99%   12.54%   8.33%
  {  3584,    1,   18,  164},  // 43    73  0.21%   12.53%   7.69%
  {  3840,    1,   17,  164},  // 44    68  0.41%   12.53%   7.14%
  {  4096,    1,   16,  223},  // 45    64  0.02%   12.53%   6.67%
  {  4224,    1,   15,  163},  // 46    62  0.12%   12.53%   3.12%
  {  4480,    1,   14,  166},  // 47    58  0.90%   12.54%   6.06%
  {  4736,    1,   13,  164},  // 48    55  0.65%   12.54%   5.71%
  {  5120,    1,   12,  166},  // 49    51  0.41%   12.53%   8.11%
  {  5504,    1,   11,  164},  // 50    47  1.34%   12.54%   7.50%
  {  6144,    1,   10,  164},  // 51    42  1.58%   12.54%  11.63%
  {  6528,    1,   10,  163},  // 52    40  0.41%   12.53%   6.25%
  {  7168,    1,    9,  163},  // 53    36  1.58%   12.54%   9.80%
  {  8192,    1,    8,  173},  // 54    32  0.02%   12.53%  14.29%
  {  8704,    1,    7,  164},  // 55    30  0.41%   12.54%   6.25%
  {  9344,    1,    7,  163},  // 56    28  0.21%   12.53%   7.35%
  { 10368,    1,    6,  163},  // 57    25  1.14%   12.54%  10.96%
  { 11392,    1,    5,  163},  // 58    23  0.07%   12.53%   9.88%
  { 12416,    1,    5,  163},  // 59    21  0.56%   12.54%   8.99%
  { 13056,    1,    5,  163},  // 60    20  0.41%   12.54%   5.15%
  { 13696,    1,    4,  163},  // 61    19  0.75%   12.54%   4.90%
  { 15360,    1,    4,  163},  // 62    17  0.41%   12.54%  12.15%
  { 16384,    1,    4,  166},  // 63    16  0.02%   12.53%   6.67%
  { 17408,    1,    3,  163},  // 64    15  0.41%   12.54%   6.25%
  { 18688,    1,    3,  163},  // 65    14  0.21%   12.54%   7.35%
  { 20096,    1,    3,  161},  // 66    13  0.36%   12.54%   7.53%
  { 21760,    1,    3,  163},  // 67    12  0.41%   12.54%   8.28%
  { 23808,    1,    2,  163},  // 68    11  0.12%   12.53%   9.41%
  { 26112,    1,    2,  163},  // 69    10  0.41%   12.54%   9.68%
  { 29056,    1,    2,  163},  // 70     9  0.26%   12.54%  11.27%
  { 32768,    1,    2,  175},  // 71     8  0.02%   12.53%  12.78%
  { 37376,    1,    2,  163},  // 72     7  0.21%   12.54%  14.06%
  { 43648,    1,    2,  163},  // 73     6  0.12%   12.54%  16.78%
  { 45568,    2,    2,  161},  // 74    11  4.40%   12.63%   4.40%
  { 52352,    1,    2,  161},  // 75     5  0.16%   12.54%  14.89%
  { 56064,    2,    2,  161},  // 76     9  3.77%   12.63%   7.09%
  { 65536,    1,    2,  163},  // 77     4  0.02%   12.53%  16.89%
  { 74880,    2,    2,  161},  // 78     7  0.03%   12.53%  14.26%
  { 87296,    1,    2,  161},  // 79     3  0.12%   12.54%  16.58%
  {104832,    2,    2,  161},  // 80     5  0.03%   12.54%  20.09%
  {112256,    3,    2,  161},  // 81     7  0.09%   12.54%   7.08%
  {131072,    1,    2,  163},  // 82     2  0.02%   12.53%  16.76%
  {149760,    3,    2,  161},  // 83     5  4.79%   12.88%  14.26%
  {174720,    2,    2,  161},  // 84     3  0.03%   12.54%  16.67%
  {196608,    3,    2,  159},  // 85     4  0.01%   12.53%  12.53%
  {209664,    4,    2,  161},  // 86     5  0.03%   12.54%   6.64%
  {262144,    1,    2,  163},  // 87     1  0.02%    0.03%  25.03%
};
#elif TCMALLOC_PAGE_SHIFT == 12
static_assert(kMaxSize == 8192, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = false,
  .span_size = 48,
  .sampling_interval = 524288,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 3503},  //  0   512  1.16%    0.92%   0.00%
  {    16,    1,   32, 3503},  //  1   256  1.16%    0.92% 100.00%
  {    32,    1,   32, 3503},  //  2   128  1.16%    0.92% 100.00%
  {    48,    1,   32, 3503},  //  3    85  1.54%    0.92%  50.00%
  {    64,    1,   32, 3503},  //  4    64  1.16%    0.92%  33.33%
  {    80,    1,   32, 1481},  //  5    51  1.54%    0.92%  25.00%
  {    96,    1,   32,  971},  //  6    42  2.70%    0.92%  20.00%
  {   112,    1,   32,  706},  //  7    36  2.70%    0.92%  16.67%
  {   128,    1,   32,  753},  //  8    32  1.16%    0.92%  14.29%
  {   144,    1,   32,  607},  //  9    28  2.70%    0.92%  12.50%
  {   160,    1,   32,  602},  // 10    25  3.47%    0.92%  11.11%
  {   176,    1,   32,  361},  // 11    23  2.32%    0.92%  10.00%
  {   192,    1,   32,  366},  // 12    21  2.70%    0.92%   9.09%
  {   208,    1,   32,  340},  // 13    19  4.63%    0.92%   8.33%
  {   224,    1,   32,  325},  // 14    18  2.70%    0.92%   7.69%
  {   240,    1,   32,  320},  // 15    17  1.54%    0.92%   7.14%
  {   256,    1,   32,  419},  // 16    16  1.16%    0.92%   6.67%
  {   272,    1,   32,  270},  // 17    15  1.54%    0.92%   6.25%
  {   288,    1,   32,  251},  // 18    14  2.70%    0.92%   5.88%
  {   304,    1,   32,  241},  // 19    13  4.63%    0.92%   5.56%
  {   336,    1,   32,  332},  // 20    12  2.70%    0.92%  10.53%
  {   368,    1,   32,  246},  // 21    11  2.32%    0.92%   9.52%
  {   448,    1,   32,  265},  // 22     9  2.70%    0.92%  21.74%
  {   512,    1,   32,  452},  // 23     8  1.16%    0.92%  14.29%
  {   576,    2,   32,  292},  // 24    14  2.14%    0.92%  12.50%
  {   640,    2,   32,  227},  // 25    12  6.80%    0.92%  11.11%
  {   704,    2,   32,  226},  // 26    11  6.02%    0.92%  10.00%
  {   768,    2,   32,  250},  // 27    10  6.80%    0.93%   9.09%
  {   896,    2,   32,  301},  // 28     9  2.14%    0.92%  16.67%
  {  1024,    2,   32,  857},  // 29     8  0.58%    0.92%  14.29%
  {  1152,    3,   32,  239},  // 30    10  6.61%    0.93%  12.50%
  {  1280,    3,   32,  221},  // 31     9  6.61%    0.93%  11.11%
  {  1536,    3,   32,  233},  // 32     8  0.39%    0.92%  20.00%
  {  1792,    4,   32,  229},  // 33     9  1.85%    0.92%  16.67%
  {  2048,    4,   32,  265},  // 34     8  0.29%    0.92%  14.29%
  {  2304,    4,   28,  222},  // 35     7  1.85%    0.92%  12.50%
  {  2688,    4,   24,  226},  // 36     6  1.85%    0.93%  16.67%
  {  3200,    4,   20,  224},  // 37     5  2.63%    0.93%  19.05%
  {  3584,    7,   18,  229},  // 38     8  0.17%    0.92%  12.00%
  {  4096,    4,   16,  465},  // 39     4  0.29%    0.92%  14.29%
  {  4736,    5,   13,  236},  // 40     4  7.72%    1.77%  15.62%
  {  5376,    4,   12,  219},  // 41     3  1.85%    1.72%  13.51%
  {  6144,    3,   10,  221},  // 42     2  0.39%    1.70%  14.29%
  {  7168,    7,    9,  222},  // 43     4  0.17%    1.70%  16.67%
  {  8192,    4,    8,  251},  // 44     2  0.29%    1.70%  14.29%
};
#else
#error "Unsupported TCMALLOC_PAGE_SHIFT value!"
#endif
#endif
// clang-format on

static_assert(sizeof(List) / sizeof(List[0]) <= kNumBaseClasses);
extern constexpr SizeClasses kLegacySizeClasses{List, Assumptions};

}  // namespace tcmalloc_internal
}  // namespace tcmalloc
GOOGLE_MALLOC_SECTION_END
